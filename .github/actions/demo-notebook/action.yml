name: Execute demo notebooks
description: Installs python3, validmind, checks dependencies then executes ONLY the training notebook series with development heap tracking

inputs:
  dev_env:
    description: "Load the created dev.env file"
    required: true
  valid_env:
    description: "Load the created valid.env file"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install python3 for Jupyter Notebooks
      shell: bash
      run: |
        python3 -m pip install jupyter
        python -m pip install --upgrade pip

    - name: Install validmind for notebook execution
      shell: bash
      run: |
        pip install validmind
        pip install validmind[llm]

    - name: Clone validmind-library @ prod
      shell: bash
      run: |
        git clone --depth 1 --single-branch --branch prod https://github.com/validmind/validmind-library.git
        cp validmind-library/poetry.lock poetry.lock

    # 2) Set up Python and enable pip cache keyed by the lockfile
    - uses: actions/setup-python@v5
      id: py
      with:
        python-version: '3.11' # or your matrix
        cache: 'pip'
        cache-dependency-path: |
          poetry.lock # add more files if they affect deps

    - name: Install Poetry (with export plugin)
      uses: snok/install-poetry@v1
      with:
        plugins: poetry-plugin-export

    - name: Install dependencies from validmind-library
      shell: bash
      run: |
        python -m pip install --upgrade pip
        cd validmind-library
        poetry export --without-hashes --format=requirements.txt > ../requirements.txt
        cd ..
        pip install -r requirements.txt

    # - name: Cache validmind-library poetry install
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.cache/pypoetry
    #       ~/.cache/pip
    #     key: validmind-library-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
    #     restore-keys: |
    #       validmind-library-${{ runner.os }}-

    # - name: Install Poetry (with export plugin)
    #   uses: snok/install-poetry@v1
    #   with:
    #     plugins: poetry-plugin-export
    #     virtualenvs-create: false # optional: install into runner Python instead of venv

    # - name: Export and install deps
    #   shell: bash
    #   run: |
    #     cd validmind-library
    #     poetry export -f requirements.txt --without-hashes -o ../requirements.txt
    #     cd ..
    #     pip install -r requirements.txt

    # - name: Install dependencies from validmind-library
    #   shell: bash
    #   run: |
    #     pip install poetry==1.7.1
    #     cd validmind-library
    #     poetry export --without-hashes --format=requirements.txt > ../requirements.txt
    #     cd ..
    #     pip install -r requirements.txt

    - name: Register validmind kernel
      shell: bash
      run: |
        python -m ipykernel install --user --name validmind --display-name "ValidMind Library"

    - name: Ensure dev.env file is available
      shell: bash
      id: find_dev_env
      run: |
        if [ ! -f "${{ inputs.dev_env }}" ]; then
          echo "Error: dev.env file not found at ${{ inputs.dev_env }}"
          exit 1
        fi

    - name: Execute ONLY the ValidMind for model development series with heap development
      shell: bash
      if: ${{ steps.find_dev_env.outcome == 'success' }}
      run: |
          cd site
          cp ../${{ inputs.dev_env }} ../.env
          source ../.env
          quarto render --profile exe-demo notebooks/EXECUTED/model_development &> render_errors.log || {
            echo "Execute for ValidMind for model development series failed";
            cat render_errors.log;
            exit 1;
          }

    - name: Ensure valid.env file is available
      shell: bash
      id: find_valid_env
      run: |
        if [ ! -f "${{ inputs.valid_env }}" ]; then
          echo "Error: valid.env file not found at ${{ inputs.valid_env }}"
          exit 1
        fi

    - name: Execute ONLY the ValidMind for model validation series with heap development
      shell: bash
      if: ${{ steps.find_valid_env.outcome == 'success' }}
      run: |
          cd site
          cp ../${{ inputs.valid_env }} ../.env
          source ../.env
          quarto render --profile exe-demo notebooks/EXECUTED/model_validation &> render_errors.log || {
            echo "Execute for ValidMind for model validation series failed";
            cat render_errors.log;
            exit 1;
          }