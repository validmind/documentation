name: Execute demo notebooks
description: Installs python3, validmind, checks dependencies then executes ONLY the training notebook series with development heap tracking

inputs:
  dev_env:
    description: "Load the created dev.env file"
    required: true
  valid_env:
    description: "Load the created valid.env file"
    required: true

runs:
  using: "composite"
  steps:
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: python-pip-${{ runner.os }}-${{ hashFiles('.github/actions/demo-notebook/action.yml') }}
        restore-keys: |
          python-pip-${{ runner.os }}-

    - name: Install python3 for Jupyter Notebooks
      shell: bash
      run: |
        python3 -m pip install jupyter
        python -m pip install --upgrade pip

    - name: Install validmind for notebook execution
      shell: bash
      run: |
        pip install validmind
        pip install validmind[llm]

    - name: Clone validmind-library
      shell: bash
      run: |
        git clone https://github.com/validmind/validmind-library.git
        cp validmind-library/poetry.lock poetry.lock

    - name: Extract Poetry spec from pyproject.toml
      id: poetry_spec
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install toml
        SPEC=$(python -c "import toml
        d=toml.load('validmind-library/pyproject.toml')
        spec='poetry'
        for r in d.get('build-system',{}).get('requires',[]):
            if isinstance(r,str) and r.strip().startswith('poetry'):
                spec=r.strip(); break
        spec=d.get('tool',{}).get('poetry',{}).get('dependencies',{}).get('poetry', spec)
        print(spec)")
                echo "spec=$SPEC" >> "$GITHUB_OUTPUT"

    - name: Cache validmind-library poetry install
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: validmind-library-${{ runner.os }}-poetry-${{ steps.poetry_spec.outputs.spec }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          validmind-library-${{ runner.os }}-poetry-${{ steps.poetry_spec.outputs.spec }}-
          validmind-library-${{ runner.os }}-

    - name: Install dependencies from validmind-library
      shell: bash
      run: |
        python -m pip install "${{ steps.poetry_spec.outputs.spec }}"
        python -m pip install "poetry-plugin-export>=1.9"
        poetry --version
        poetry check -C validmind-library -v
        poetry export -C validmind-library --without-hashes -f requirements.txt -o ./requirements.txt
        ls -l requirements.txt  # debug to confirm file exists
        pip install -r requirements.txt

    - name: Register validmind kernel
      shell: bash
      run: |
        python -m ipykernel install --user --name validmind --display-name "ValidMind Library"

    - name: Ensure dev.env file is available
      shell: bash
      id: find_dev_env
      run: |
        if [ ! -f "${{ inputs.dev_env }}" ]; then
          echo "Error: dev.env file not found at ${{ inputs.dev_env }}"
          exit 1
        fi

    - name: Execute ONLY the ValidMind for model development series with heap development
      shell: bash
      if: ${{ steps.find_dev_env.outcome == 'success' }}
      run: |
          cd site
          cp ../${{ inputs.dev_env }} ../.env
          source ../.env
          quarto render --profile exe-demo notebooks/EXECUTED/model_development &> render_errors.log || {
            echo "Execute for ValidMind for model development series failed";
            cat render_errors.log;
            exit 1;
          }

    - name: Ensure valid.env file is available
      shell: bash
      id: find_valid_env
      run: |
        if [ ! -f "${{ inputs.valid_env }}" ]; then
          echo "Error: valid.env file not found at ${{ inputs.valid_env }}"
          exit 1
        fi

    - name: Execute ONLY the ValidMind for model validation series with heap development
      shell: bash
      if: ${{ steps.find_valid_env.outcome == 'success' }}
      run: |
          cd site
          cp ../${{ inputs.valid_env }} ../.env
          source ../.env
          quarto render --profile exe-demo notebooks/EXECUTED/model_validation &> render_errors.log || {
            echo "Execute for ValidMind for model validation series failed";
            cat render_errors.log;
            exit 1;
          }
