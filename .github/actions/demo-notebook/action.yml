name: Execute demo notebooks
description: Installs python3, validmind, checks dependencies then executes ONLY the training notebook series with development heap tracking

inputs:
  dev_env:
    description: "Load the created dev.env file"
    required: true
  valid_env:
    description: "Load the created valid.env file"
    required: true

runs:
  using: "composite"
  steps:
    # - name: Cache pip dependencies
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/.cache/pip
    #     key: python-pip-${{ runner.os }}-${{ hashFiles('.github/actions/demo-notebook/action.yml') }}
    #     restore-keys: |
    #       python-pip-${{ runner.os }}-

    # - name: Install python3 for Jupyter Notebooks
    #   shell: bash
    #   run: |
    #     python3 -m pip install jupyter
    #     python -m pip install --upgrade pip
    #     python -m pip install aequitas

    - name: Install Poetry
      shell: bash
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"

    - name: Install Python dependencies via Poetry with retry
      shell: bash
      run: |
        max_attempts=3
        attempt=1
        success=0

        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt to install dependencies"
          python3 -m pip install jupyter
          python -m pip install --upgrade pip
          python -m pip install aequitas && \
          poetry install --no-interaction --no-root && success=1 && break

          attempt=$((attempt + 1))
          sleep 5
        done

        if [ $success -ne 1 ]; then
          echo "Dependency installation failed after $max_attempts attempts"
          exit 1
        fi

    - name: Cache Poetry downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ hashFiles('**/poetry.lock') }}

    - name: Register 'validmind' Jupyter kernel in Poetry venv
      shell: bash
      run: |
        poetry run python -m ipykernel install \
          --name validmind \
          --display-name "ValidMind Library" \
          --prefix $(poetry env info --path)

    - name: Ensure dev.env file is available
      shell: bash
      id: find_dev_env
      run: |
        if [ ! -f "${{ inputs.dev_env }}" ]; then
          echo "Error: dev.env file not found at ${{ inputs.dev_env }}"
          exit 1
        fi

    - name: Debug Jupyter kernel list
      shell: bash
      run: |
        poetry run jupyter kernelspec list
        cat $(poetry env info --path)/share/jupyter/kernels/validmind/kernel.json || echo "Kernel not found"

    - name: Execute ValidMind model development notebooks with Quarto
      shell: bash
      if: ${{ steps.find_dev_env.outcome == 'success' }}
      run: |
        set +e  # Disable immediate exit on errors — allows retry logic

        cd site

        # Load environment variables
        cp ../${{ inputs.dev_env }} ../.env
        source ../.env

        echo "== Memory before render =="
        free -m || true

        max_attempts=3
        attempt=1
        success=0

        while [ $attempt -le $max_attempts ]; do
          echo "== Attempt $attempt of $max_attempts =="

          poetry run quarto render --profile exe-demo notebooks/EXECUTED/model_development > render_out.log 2> render_err.log

          status=$?
          if [ $status -eq 0 ]; then
            echo "✅ Quarto render succeeded"
            success=1
            break
          else
            echo "❌ Quarto render failed (attempt $attempt)"
            echo "------ STDERR ------"
            cat render_err.log || echo "(render_err.log missing)"
            echo "--------------------"
            attempt=$((attempt + 1))
            sleep 5
          fi
        done

        if [ $success -ne 1 ]; then
          echo "🔥 Quarto render failed after $max_attempts attempts"
          echo "Final STDERR:"
          cat render_err.log || echo "(render_err.log missing)"
          exit 1
        fi

    # - name: Ensure valid.env file is available
    #   shell: bash
    #   id: find_valid_env
    #   run: |
    #     if [ ! -f "${{ inputs.valid_env }}" ]; then
    #       echo "Error: valid.env file not found at ${{ inputs.valid_env }}"
    #       exit 1
    #     fi

    # - name: Execute ONLY the ValidMind for model validation series with heap development
    #   shell: bash
    #   if: ${{ steps.find_valid_env.outcome == 'success' }}
    #   run: |
    #       cd site
    #       cp ../${{ inputs.valid_env }} ../.env
    #       source ../.env
    #       quarto render --profile exe-demo notebooks/EXECUTED/model_validation &> render_errors.log || {
    #         echo "Execute for ValidMind for model validation series failed";
    #         cat render_errors.log;
    #         exit 1;
    #       }
