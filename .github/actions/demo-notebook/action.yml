name: Execute demo notebooks
description: Installs python3, validmind, checks dependencies then executes ONLY the training notebook series with development heap tracking

inputs:
  dev_env:
    description: "Load the created dev.env file"
    required: true
  valid_env:
    description: "Load the created valid.env file"
    required: true

runs:
  using: "composite"
  steps:
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: python-pip-${{ runner.os }}-${{ hashFiles('.github/actions/demo-notebook/action.yml') }}
        restore-keys: |
          python-pip-${{ runner.os }}-

    - name: Install python3 for Jupyter Notebooks
      shell: bash
      run: |
        python3 -m pip install jupyter
        python -m pip install --upgrade pip

    - name: Install validmind for notebook execution
      shell: bash
      run: |
        pip install validmind
        pip install validmind[llm]

    - name: Clone validmind-library
      shell: bash
      run: |
        git clone https://github.com/validmind/validmind-library.git
        cp validmind-library/poetry.lock poetry.lock

    - name: Cache validmind-library poetry install
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: validmind-library-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          validmind-library-${{ runner.os }}-

    - name: Install dependencies from validmind-library
      shell: bash
      run: |
        # Detect Poetry version from the cloned repo's lockfile header and install that version
        POETRY_VERSION=$(grep -m1 -oE 'Poetry [0-9]+(\.[0-9]+){1,2}' validmind-library/poetry.lock | awk '{print $2}')
        if [ -n "$POETRY_VERSION" ]; then
          echo "Installing Poetry version $POETRY_VERSION from validmind-library/poetry.lock"
          pip install "poetry==${POETRY_VERSION}" || {
            echo "Failed to install Poetry $POETRY_VERSION via pip; installing latest Poetry instead";
            pip install poetry;
          }
        else
          echo "Warning: Could not detect Poetry version from validmind-library/poetry.lock; installing latest Poetry"
          pip install poetry
        fi

        # Ensure 'poetry export' is available (Poetry 1.2+ requires the export plugin)
        if ! poetry help export >/dev/null 2>&1; then
          echo "'poetry export' not found; installing plugin 'poetry-plugin-export'"
          pip install poetry-plugin-export || poetry self add poetry-plugin-export
        fi

        cd validmind-library
        # Export only the main dependency group to avoid optional/extras conflicts
        poetry export -f requirements.txt --without-hashes --only main -o ../requirements.txt
        cd ..

        # Workaround for duplicate unmarked numpy pins that can confuse pip's resolver
        if grep -qE '^numpy==[0-9]+' requirements.txt; then
          NUM_DUPES=$(grep -E '^numpy==[0-9][^;]*$' requirements.txt | wc -l | tr -d ' ')
          if [ "$NUM_DUPES" -gt 1 ]; then
            echo "Detected $NUM_DUPES duplicate unmarked numpy pins; keeping the highest version"
            BEST=$(grep -E '^numpy==[0-9][^;]*$' requirements.txt | cut -d= -f3 | sort -V | tail -n1)
            awk -v best="$BEST" '\
              BEGIN{OFS=""} \
              { \
                if ($0 ~ /^numpy==[0-9][^;]*$/) { \
                  if ($0 == "numpy==" best) print; \
                } else { print } \
              }' requirements.txt > requirements.fixed.txt
            mv requirements.fixed.txt requirements.txt
          fi
        fi

        pip install -r requirements.txt

    - name: Register validmind kernel
      shell: bash
      run: |
        python -m ipykernel install --user --name validmind --display-name "ValidMind Library"

    - name: Ensure dev.env file is available
      shell: bash
      id: find_dev_env
      run: |
        if [ ! -f "${{ inputs.dev_env }}" ]; then
          echo "Error: dev.env file not found at ${{ inputs.dev_env }}"
          exit 1
        fi

    - name: Execute ONLY the ValidMind for model development series with heap development
      shell: bash
      if: ${{ steps.find_dev_env.outcome == 'success' }}
      run: |
          cd site
          cp ../${{ inputs.dev_env }} ../.env
          source ../.env
          quarto render --profile exe-demo notebooks/EXECUTED/model_development &> render_errors.log || {
            echo "Execute for ValidMind for model development series failed";
            cat render_errors.log;
            exit 1;
          }

    - name: Ensure valid.env file is available
      shell: bash
      id: find_valid_env
      run: |
        if [ ! -f "${{ inputs.valid_env }}" ]; then
          echo "Error: valid.env file not found at ${{ inputs.valid_env }}"
          exit 1
        fi

    - name: Execute ONLY the ValidMind for model validation series with heap development
      shell: bash
      if: ${{ steps.find_valid_env.outcome == 'success' }}
      run: |
          cd site
          cp ../${{ inputs.valid_env }} ../.env
          source ../.env
          quarto render --profile exe-demo notebooks/EXECUTED/model_validation &> render_errors.log || {
            echo "Execute for ValidMind for model validation series failed";
            cat render_errors.log;
            exit 1;
          }