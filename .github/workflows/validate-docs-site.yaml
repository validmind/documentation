name: Validate docs site (render, test, and deploy)

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

permissions:
  issues: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Get latest Quarto release URL
      id: get-quarto-url
      run: |
        API_URL="https://api.github.com/repos/quarto-dev/quarto-cli/releases/latest"
        DOWNLOAD_URL=$(curl -s $API_URL | jq -r '.assets[] | select(.name | endswith("linux-amd64.deb")).browser_download_url')
        echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV

    - name: Download and install Quarto
      run: |
        wget ${{ env.DOWNLOAD_URL }} -O quarto-latest-linux-amd64.deb
        sudo dpkg -i quarto-latest-linux-amd64.deb

    - name: Render site
      run: |
          cd site 
          quarto render

    - name: Test for warnings or errors 
      run: |
        if grep -q 'WARN:\|ERROR:' site/render_errors.log; then
          echo "Warnings or errors detected during Quarto render"
          cat site/render_errors.log
          exit 1
        else
          echo "No warnings or errors detected during Quarto render"
        fi

      # Demo bucket is in us-east-1
    - name: Configure AWS credentials
      run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region us-east-1

    - name: Deploy PR preview
      run: aws s3 sync site/_site s3://docs-ci-cd-demo/site/pr_previews/${{ github.head_ref }} --delete && aws cloudfront create-invalidation --distribution-id E38AINJY5CYN6P --paths "/*" --no-cli-pager

    - name: Post comment with preview URL
      uses: actions/github-script@v6
      with:
        script: |
          const url = `https://docs-demo.vm.validmind.ai/pr_previews/${{ github.head_ref }}/index.html`;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `A PR preview is available: [Preview URL](${url})`
          });