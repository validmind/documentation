name: Validate docs site (render, test, and deploy)

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

permissions:
  issues: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: "Checkout documentation repository"
      uses: actions/checkout@v4
      with:
        repository: validmind/installation
        path: site/_source/installation
        token: ${{ secrets.INSTALLATION_RO_PAT }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Fetch Quarto
      uses: ./.github/actions/fetch-quarto

    - name: Setup R environment
      uses: ./.github/actions/setup-r

    - name: Populate installation
      run: cp -r site/_source/installation/site/installation site/installation

    - name: Save branch name
      run: |
        mkdir -p .github
        echo "${{ github.head_ref }}" > .github/head_ref

    - name: Render demo docs site
      run: |
          cd site
          quarto render --profile development 2>&1 | tee render_errors.log || {
          echo "Quarto render failed immediately";
          cat render_errors.log;
          exit 1;
          }
    # See if site/notebooks/ has updates
    # Checks the current PR branch against the target branch
    - name: Filter changed files
      uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ github.event.pull_request.base_ref }}
        ref: ${{ github.head_ref }}
        filters: |
          notebooks:
            - 'site/notebooks/**'

    # If yes then create the .env file for use in execution step
    - name: Create .env file
      if: steps.filter.outputs.notebooks == 'true'
      id: create_env
      run: |
        touch .env
        echo VM_API_HOST=${{ secrets.PLATFORM_API_HOST }} >> .env
        echo VM_API_KEY=${{ secrets.PLATFORM_API_KEY }} >> .env
        echo VM_API_SECRET=${{ secrets.PLATFORM_API_SECRET }} >> .env
        echo VM_API_MODEL=${{ secrets.PLATFORM_DEV_MODEL }} >> .env
        cat .env

    # Only execute the demo notebook if .env file is created
    - name: Execute demo ValidMind for model development series
      if: ${{ vars.ENABLE_DEMO_NOTEBOOK == 'true' && steps.create_env.outcome == 'success' }}
      uses: ./.github/actions/demo-notebook
      id: execute-demo-notebook
      with:
        env_file: .env

    - name: Test for warnings or errors
      run: |
        if grep -q 'WARN:\|ERROR:' site/render_errors.log; then
          echo "Warnings or errors detected during Quarto render"
          cat site/render_errors.log
          exit 1
        else
          echo "No warnings or errors detected during Quarto render"
        fi

    # Demo bucket is in us-east-1
    - name: Configure AWS credentials
      run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set default.region us-east-1

    - name: Deploy PR preview
      run: |
          echo "Listing files before S3 sync:"
          ls -la site/_site
          echo "Running S3 sync..."
          aws s3 sync site/_site s3://docs-ci-cd-demo/site/pr_previews/${{ github.head_ref }} --delete --debug
          echo "Creating CloudFront invalidation..."
          aws cloudfront create-invalidation --distribution-id E38AINJY5CYN6P --paths "/*" --no-cli-pager

    - name: Post preview URL comment
      uses: actions/github-script@v6
      with:
        script: |
          const previewUrl = `https://docs-demo.vm.validmind.ai/pr_previews/${{ github.head_ref }}/index.html`;
          
          // Delete old preview comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          for (const comment of comments) {
            if (comment.user.login === 'github-actions[bot]' && comment.body.includes('## Validate docs site')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }
          
          let comment = `## Validate docs site\n\n`;
          comment += `✓ INFO: A live preview of the docs site is available — [Open the preview](${previewUrl})\n\n`;

          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });
