---
title: Robustness
toc-depth: 3
toc-expand: 3
---

## call_model[()]{.muted}

```python
def call_model(
    system_prompt: {'cls': 'ExprName', 'name': 'str'},    user_prompt: {'cls': 'ExprName', 'name': 'str'},    temperature: {'cls': 'ExprName', 'name': 'float'} = 0.0,    seed: {'cls': 'ExprName', 'name': 'int'} = 42):
```

Call LLM with the given prompts and return the response

## Robustness[()]{.muted}

```python
def Robustness(
    model,
    dataset,
    num_tests = 10):
```

Assesses the robustness of prompts provided to a Large Language Model under varying conditions and contexts. This test specifically measures the model's ability to generate correct classifications with the given prompt even when the inputs are edge cases or otherwise difficult to classify.

### Purpose

The Robustness test is meant to evaluate the resilience and reliability of prompts provided to a Language Learning Model (LLM). The aim of this test is to guarantee that the prompts consistently generate accurate and expected outputs, even in diverse or challenging scenarios. This test is only applicable to LLM-powered text classification tasks where the prompt has a single input variable.

### Test Mechanism

The Robustness test appraises prompts under various conditions, alterations, and contexts to ascertain their stability in producing consistent responses from the LLM. Factors evaluated include different phrasings, inclusion of potential distracting elements, and various input complexities. By default, the test generates 10 inputs for a prompt but can be adjusted according to test parameters.

### Signs of High Risk

- If the output from the tests diverges extensively from the expected results, this indicates high risk.
- When the prompt doesn't give a consistent performance across various tests.
- A high risk is indicated when the prompt is susceptible to breaking, especially when the output is expected to be of a specific type.

### Strengths

- The robustness test helps to ensure stable performance of the LLM prompts and lowers the chances of generating unexpected or off-target outputs.
- This test is vital for applications where predictability and reliability of the LLMâ€™s output are crucial.

### Limitations

- Currently, the test only supports single-variable prompts, which restricts its application to more complex models.
- When there are too many target classes (over 10), the test is skipped, which can leave potential vulnerabilities unchecked in complex multi-class models.
- The test may not account for all potential conditions or alterations that could show up in practical use scenarios.

## [class]{.muted} MissingRequiredTestInputError

```python
class MissingRequiredTestInputError(BaseError):
```

When a required test context variable is missing.

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)
- **From builtins.BaseException**: with_traceback, add_note

## [class]{.muted} SkipTestError

```python
class SkipTestError(BaseError):
```

Useful error to throw when a test cannot be executed.

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)
- **From builtins.BaseException**: with_traceback, add_note
