---
title: "[validmind](/reference/validmind.html).lending_club"
sidebar: validmind-reference
---

## compute_scores[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def compute_scores(
    probabilities):
```

## feature_engineering[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def feature_engineering(
    df,
    verbose = True):
```

## get_demo_test_config[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def get_demo_test_config(
    x_test = None,
    y_test = None):
```

Get demo test configuration.

**Parameters**

- **x_test**: Test features DataFrame
- **y_test**: Test target Series

**Returns**

- Test configuration dictionary

## init_vm_objects[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def init_vm_objects(
    scorecard):
```

## load_data[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def load_data(
    source = 'online',
    verbose = True):
```

Load data from either an online source or offline files, automatically dropping specified columns for offline data. :param source: 'online' for online data, 'offline' for offline files. Defaults to 'online'. :return: DataFrame containing the loaded data.

## load_scorecard[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def load_scorecard(
):
```

## load_test_config[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def load_test_config(
    scorecard):
```

## preprocess[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def preprocess(
    df,
    verbose = True):
```

## split[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def split(
    df,
    validation_size = None,
    test_size = 0.2,
    add_constant = False,
    verbose = True):
```

Split dataset into train, validation (optional), and test sets.

**Parameters**

- **df**: Input DataFrame
- **validation_split**: If None, returns train/test split. If float, returns train/val/test split
- **test_size**: Proportion of data for test set (default: 0.2)
- **add_constant**: Whether to add constant column for statsmodels (default: False)

**Returns**

- If validation_size is None: train_df, test_df If validation_size is float: train_df, validation_df, test_df

## woe_encoding[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def woe_encoding(
    df,
    verbose = True):
```
