---
title: "[validmind](/reference/validmind.html).ProtectedClassesThresholdOptimizer"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
---

## get_logger<span class='muted'>()</span>

<!-- module.qmd.jinja2 - module level function alias -->

```python
def get_logger(
    name = 'validmind',
    log_level = None):
```

Get a logger for the given module name

## calculate_fairness_metrics[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def calculate_fairness_metrics(
    test_df,
    target,
    y_pred_opt,
    protected_classes):
```

## calculate_group_metrics[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def calculate_group_metrics(
    test_df,
    target,
    y_pred_opt,
    protected_classes):
```

## get_thresholds_by_group[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def get_thresholds_by_group(threshold_optimizer):
```

## initialize_and_fit_optimizer[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def initialize_and_fit_optimizer(
    pipeline,
    X_train,
    y_train,
    protected_classes_df):
```

## make_predictions[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def make_predictions(
    threshold_optimizer,
    test_df,
    protected_classes):
```

## plot_thresholds[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def plot_thresholds(threshold_optimizer):
```

## ProtectedClassesThresholdOptimizer[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def ProtectedClassesThresholdOptimizer(
    dataset,
    pipeline = None,
    protected_classes = None,
    X_train = None,
    y_train = None):
```

Obtains a classifier by applying group-specific thresholds to the provided estimator.

### Purpose

This test aims to optimize the fairness of a machine learning model by applying different classification thresholds for different protected groups. It helps in mitigating bias and achieving more equitable outcomes across different demographic groups.

### Test Mechanism

The test uses Fairlearn's ThresholdOptimizer to:

1. Fit an optimizer on the training data, considering protected classes.
1. Apply optimized thresholds to make predictions on the test data.
1. Calculate and report various fairness metrics.
1. Visualize the optimized thresholds.

### Signs of High Risk

- Large disparities in fairness metrics (e.g., Demographic Parity Ratio, Equalized Odds Ratio) across different protected groups.
- Significant differences in False Positive Rates (FPR) or True Positive Rates (TPR) between groups.
- Thresholds that vary widely across different protected groups.

### Strengths

- Provides a post-processing method to improve model fairness without modifying the original model.
- Allows for balancing multiple fairness criteria simultaneously.
- Offers visual insights into the threshold optimization process.

### Limitations

- May lead to a decrease in overall model performance while improving fairness.
- Requires access to protected attribute information at prediction time.
- The effectiveness can vary depending on the chosen fairness constraint and objective.

## [class]{.muted} MissingDependencyError

<!-- class.qmd.jinja2 - class definition -->

```python
class MissingDependencyError(BaseError):
```

When a required dependency is missing.

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)
- **From builtins.BaseException**: with_traceback, add_note
