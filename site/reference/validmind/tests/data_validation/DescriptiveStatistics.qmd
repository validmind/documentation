---
title: "[validmind](/reference/validmind.html).DescriptiveStatistics"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
# module.qmd.jinja2
---

## format_records<span class='muted'>()</span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">format_records</span>(<span class="param"><span class="n">df</span><span class="p">:</span><!-- types.jinja2 - format_type --></span>)<span class="p"> â†’ </span><span class="return-annotation"><!-- types.jinja2 - format_type --></span>:

:::

<!-- docstring.jinja2 -->

Round the values on each dataframe's column to a given number of decimal places.

The returned value is converted to a dict in "records" with Pandas's to_dict() function.

We do this for display purposes before sending data to ValidMind. Rules:

- Check if we are rendering "big" numbers greater than 10 or just numbers between 0 and 1
- If the column's smallest number has more decimals 6, use that number's precision so we can avoid rendering a 0 instead
- If the column's smallest number has less decimals than 6, use 6 decimal places

<!-- function.qmd.jinja2 -->

## DescriptiveStatistics[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">DescriptiveStatistics</span>(<span class="param"><span class="n">dataset</span><span class="p">:</span><!-- types.jinja2 - format_type --><span class="n">VMDataset</span></span>):

:::

<!-- docstring.jinja2 -->

Performs a detailed descriptive statistical analysis of both numerical and categorical data within a model's

dataset.

### Purpose

The purpose of the Descriptive Statistics metric is to provide a comprehensive summary of both numerical and categorical data within a dataset. This involves statistics such as count, mean, standard deviation, minimum and maximum values for numerical data. For categorical data, it calculates the count, number of unique values, most common value and its frequency, and the proportion of the most frequent value relative to the total. The goal is to visualize the overall distribution of the variables in the dataset, aiding in understanding the model's behavior and predicting its performance.

### Test Mechanism

The testing mechanism utilizes two in-built functions of pandas dataframes: `describe()` for numerical fields and `value_counts()` for categorical fields. The `describe()` function pulls out several summary statistics, while `value_counts()` accounts for unique values. The resulting data is formatted into two distinct tables, one for numerical and another for categorical variable summaries. These tables provide a clear summary of the main characteristics of the variables, which can be instrumental in assessing the model's performance.

### Signs of High Risk

- Skewed data or significant outliers can represent high risk. For numerical data, this may be reflected via a significant difference between the mean and median (50% percentile).
- For categorical data, a lack of diversity (low count of unique values), or overdominance of a single category (high frequency of the top value) can indicate high risk.

### Strengths

- Provides a comprehensive summary of the dataset, shedding light on the distribution and characteristics of the variables under consideration.
- It is a versatile and robust method, applicable to both numerical and categorical data.
- Helps highlight crucial anomalies such as outliers, extreme skewness, or lack of diversity, which are vital in understanding model behavior during testing and validation.

### Limitations

- While this metric offers a high-level overview of the data, it may fail to detect subtle correlations or complex patterns.
- Does not offer any insights on the relationship between variables.
- Alone, descriptive statistics cannot be used to infer properties about future unseen data.
- Should be used in conjunction with other statistical tests to provide a comprehensive understanding of the model's data.

<!-- function.qmd.jinja2 -->

## get_summary_statistics_categorical[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">get_summary_statistics_categorical</span>(<span class="params"><span class="n">df</span><span class="muted">,</span></span><span class="params"><span class="n">categorical_fields</span></span>):

:::

<!-- function.qmd.jinja2 -->

## get_summary_statistics_numerical[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">get_summary_statistics_numerical</span>(<span class="params"><span class="n">df</span><span class="muted">,</span></span><span class="params"><span class="n">numerical_fields</span></span>):

:::

<!-- class.qmd.jinja2 -->

## [class]{.muted} SkipTestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">SkipTestError</span>:

:::

<!-- docstring.jinja2 -->

Useful error to throw when a test cannot be executed.

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)
- **From builtins.BaseException**: with_traceback, add_note
