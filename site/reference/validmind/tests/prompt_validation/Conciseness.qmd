---
title: "[validmind](/reference/validmind.html).Conciseness"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
---

## call_model<span class='muted'>()</span>

<!-- module.qmd.jinja2 - module level function alias -->

```python
def call_model(
    system_prompt: str,
    user_prompt: str,
    temperature: float = 0.0,
    seed: int = 42):
```

Call LLM with the given prompts and return the response

## get_explanation<span class='muted'>()</span>

<!-- module.qmd.jinja2 - module level function alias -->

```python
def get_explanation(response: str):
```

Get just the explanation from the response string TODO: use json response mode instead of this

```
e.g. "Score: 8
```

Explanation: <some-explanation>" -> "<some-explanation>"

## get_score<span class='muted'>()</span>

<!-- module.qmd.jinja2 - module level function alias -->

```python
def get_score(response: str):
```

Get just the score from the response string TODO: use json response mode instead of this

```
e.g. "Score: 8
```

Explanation: <some-explanation>" -> 8

## Conciseness[()]{.muted}

<!-- function.qmd.jinja2 - function signature -->

```python
def Conciseness(
    model,
    min_threshold = 7):
```

Analyzes and grades the conciseness of prompts provided to a Large Language Model.

### Purpose

The Conciseness Assessment is designed to evaluate the brevity and succinctness of prompts provided to a Language Learning Model (LLM). A concise prompt strikes a balance between offering clear instructions and eliminating redundant or unnecessary information, ensuring that the LLM receives relevant input without being overwhelmed.

### Test Mechanism

Using an LLM, this test conducts a conciseness analysis on input prompts. The analysis grades the prompt on a scale from 1 to 10, where the grade reflects how well the prompt delivers clear instructions without being verbose. Prompts that score equal to or above a predefined threshold (default set to 7) are deemed successfully concise. This threshold can be adjusted to meet specific requirements.

### Signs of High Risk

- Prompts that consistently score below the predefined threshold.
- Prompts that are overly wordy or contain unnecessary information.
- Prompts that create confusion or ambiguity due to excess or unnecessary information.

### Strengths

- Ensures clarity and effectiveness of the prompts.
- Promotes brevity and preciseness in prompts without sacrificing essential information.
- Useful for models like LLMs, where input prompt length and clarity greatly influence model performance.
- Provides a quantifiable measure of prompt conciseness.

### Limitations

- The conciseness score is based on an AI's assessment, which might not fully capture human interpretation of conciseness.
- The predefined threshold for conciseness could be subjective and might need adjustment based on application.
- The test is dependent on the LLMâ€™s understanding of conciseness, which might vary from model to model.

## [class]{.muted} MissingRequiredTestInputError

<!-- class.qmd.jinja2 - class definition -->

```python
class MissingRequiredTestInputError(BaseError):
```

When a required test context variable is missing.

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)
- **From builtins.BaseException**: with_traceback, add_note
