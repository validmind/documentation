---
title: "Supported models"
keywords: "Supported models, ai risk, model risk management, ValidMind"
date: last-modified
---

Our Supported Models provide an array of templates for testing and documentation, aimed at specific use-cases. This topic is relevant for model developers who want to know what functionality the Developer Framework provides and how they can extend it. 

### Supported model types

Traditional statistical models 
: - Linear regression 
- Logistic regression 
- Time series 

Machine learning models
: - Hugging Face-based compatible models:
  - Natural language processing (NLP) text classification 
  - Classification 
  - Regression 
- Tree-based models using XGBoost or CatBoost:
  - Classification    
  - Regression

Generative AI models
: - Large language model-based classification (LLM)
- Large language model-based text summarization (LLM)

Modeling frameworks/packages: 
Scikit-learn
statsmodels
PyTorch
Hugging Face Transformers
XGBoost
CatBoost
LightGBM
R models (via rpy2 bridge interface)
LLM models (via OpenAI compatible APIs)

These model types cover a very large portion of the models used in commercial and retail banking. However, given the rapid developments in the AI space (e.g. LLMs), ValidMindâ€™s engineering focus has gone into making sure our developer framework is extensible to support future model types/modeling packages, so that we do not box our customers into specific model types. Customers can already add support for new model types and modeling frameworks on our Developer Framework today. 


## What is a supported model?

A _supported model_ refers to a model for which predefined testing or documentation functions exist in the ValidMind Developer Framework, provided that the model you are developing is documented using a supported version of our client library.

<!--- TO DO This text might need a bit more expansion --->
Please note the inherent dependency on data types, such as tabular, time series, and text data types. This distinction isn't always immediately evident. For example: while binary classification is possible on text datasets, only the `tabular_dataset` suite is explicitly mentioned in our list of supported models.

Additionally, the framework might accommodate additional models not explicitly listed. The absence of pre-configured tests for these models doesn't necessarily indicate a lack of support. You always have the flexibility to [integrate your own tests or connect to an external test provider](../notebooks/code_samples/custom_tests/external_test_providers_demo.ipynb), if needed.

## Related Topics

* Check out our [Developer Framework documentation](get-started-developer-framework.qmd) for more details on how to use our documentation and testing functions with supported models.

* For additional tests that are not supported, refer to our documentation on [Implementing Custom Tests](../notebooks/how_to/implementing_custom_tests.ipynb) and [Integrating External Test Providers.](../notebooks/code_samples/custom_tests/external_test_providers_demo.ipynb)
