---
title: "Supported models"
keywords: "Supported models, ai risk, model risk management, ValidMind"
date: last-modified
---

Our supported models provide an array of templates for testing and documentation, aimed at specific use-cases.

## What is a supported model?

A _supported model_ refers to a model for which predefined testing or documentation functions exist in the ValidMind Developer Framework, provided that the model you are developing is documented using a supported version of our client library. These model types cover a very large portion of the models used in commercial and retail banking. 

Given the rapid developments in the AI space, including the advent of large language models (LLMs), ValidMind product development has also focused on making sure that our developer framework is extensible to support future model types or modeling packages, so that we do not limit our users to specific model types. You always have the flexibility to:

- [Implement custom tests](../notebooks/how_to/implementing_custom_tests.ipynb)
- [Integrate external test providers](../notebooks/code_samples/custom_tests/external_test_providers_demo.ipynb)

<!--- Please note the inherent dependency on data types, such as tabular, time series, and text data types. This distinction isn't always immediately evident. For example: while binary classification is possible on text datasets, only the `tabular_dataset` suite is explicitly mentioned in our list of supported models.--->

## Supported model types

::: {.grid}

::: {.g-col-6}
Traditional statistical models
: - Linear regression
- Logistic regression
- Time series

Machine learning models
: - Hugging Face-based compatible models:
  - Text classification with natural language processing (NLP)
  - Classification
  - Regression
- Tree-based models using XGBoost or CatBoost:
  - Classification
  - Regression
:::

::: {.g-col-6}
Generative AI models
: - Large language models (LLMs):
  - Classification
  - Text summarization
:::

:::

## Supported modeling libraries and other tools

::: {.grid}

::: {.g-col-6}
- [scikit-learn](https://scikit-learn.org/stable/): A Python library for machine learning, offering a range of supervised and unsupervised learning algorithms.
- [statsmodels](https://www.statsmodels.org/stable/index.html): A Python module that provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests and exploring data.
- [PyTorch](https://pytorch.org/): An open-source machine learning library based on the Torch library, used for applications such as computer vision and natural language processing.
- [Hugging Face Transformers](https://huggingface.co/docs/transformers/en/index): Provides thousands of pre-trained models to perform tasks on texts such as classification, information extraction, question answering, summarization, translation, and text generation.
- [XGBoost](https://xgboost.readthedocs.io/en/stable/): An optimized distributed gradient boosting library designed to be highly efficient, flexible, and portable, implementing machine learning algorithms under the Gradient Boosting framework.
:::

::: {.g-col-6}
- [CatBoost](https://catboost.ai/): An open-source gradient boosting on decision trees library with categorical feature support out of the box, for ranking, classification, regression, and other ML tasks.
- [LightGBM](https://lightgbm.readthedocs.io/en/stable/): A fast, distributed, high-performance gradient boosting (GBDT, GBRT, GBM, or MART) framework based on decision tree algorithms, used for ranking, classification, and many other machine learning tasks.
- R models, via [rpy2 - R in Python](https://rpy2.github.io/): Facilitates the integration of R's statistical computing and graphics capabilities with Python, allowing for R models to be called from Python.
- Large language models (LLMs), via [OpenAI-compatible APIs](https://platform.openai.com/docs/introduction): Access to advanced AI models trained by OpenAI for a variety of natural language tasks, including text generation, translation, and analysis, through a compatible API interface. This support includes both the OpenAI API and the Azure OpenAI Service via API.
:::

:::

## Related Topics

- [Run tests & test suites](testing-overview.qmd)
- [Test descriptions](test-descriptions.qmd)
- [Code samples](samples-jupyter-notebooks.qmd)
