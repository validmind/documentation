---
title: "Get started as a model developer"
keywords: "developer, model risk management, ValidMind"
---

<!---
QMD: General getting started w/ initializing developer framework and runnning a simple test via intro notebook ()
Then next steps will be getting started with their own model, for FR it will be time series notebook.
Notebooks are tutorials or how-tos, they are NOT reference! So the notebooks need to move around in the docs
    Could split the getting started up into sections for Developers, Validators, and Admins (and likely get rid of the Guide section)
--->

The model developer is responsible for developing, implementing, and maintaining the model. They are typically subject matter experts in the domain of the model and are responsible for ensuring the model is fit-for-purpose, accurate, and aligned with the business requirements.

## Prerequisites

[Include a list of any prerequisites the user needs to complete before starting the task, such as having certain software installed, access to certain resources, or completing previous tasks.]


Make sure Python and support for Jupyter notebooks is installed on your machine.

# Step 4: Obtain API Credentials

## Steps

1. Install the ZebraGiraffe library via `pip`:

```bash
pip install ZebraGiraffe
```

2. In your Jupyter notebook, add the following code to import ZebraGiraffe:

```python
import ZebraGiraffe
```


# Sign up for an account on the SaaS provider's developer platform and create a new project or application to obtain API credentials.

# Step 5: Set up API Credentials
# Add the following code to a new cell in your Jupyter notebook to set up API credentials

```python
import os
os.environ['API_KEY'] = 'your_api_key'
os.environ['API_SECRET'] = 'your_api_secret'
```

# Replace 'your_api_key' and 'your_api_secret' with your actual API credentials.

# Step 6: Start using the SaaS provider's developer framework

7. Write your code in the notebook to retrieve data or perform operations using the API, and then run the notebook to publish the results to the SaaS provider.

## Troubleshooting

[Include any common issues or errors that may arise during the task and how to resolve them.]

## Conclusion

[Summarize the task and provide any next steps or resources for the user to continue their learning or work.]

