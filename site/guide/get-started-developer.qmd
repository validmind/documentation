---
title: "Get started as a model developer"
keywords: "developer, model risk management, ValidMind"
---

These steps show you how to get started with the ValidMind developer framework to document and test risk models with repeatability and consistency as part of your existing developer environment.

::: {.callout-tip}
Don't have a model you can use? Try our [Intro to ValidMind](../notebooks/intro.ipynb) Jupyter notebook.
:::

## Prerequisites

The developer framework requires access to the data sources where data sets used for training, testing, and trained model files are stored. This access is needed to run model documentation and validation tests, and to upload to the ValidMind SaaS platform to populate the model documentation and validation report.

## Steps

1. Install the client library:

    ```shell
    pip install validmind
    ```

2. Initialize the client library:

   Every validation project has a `project identifier` that allows the client library to associate documentation and tests with the right project. In order to initialize the client, you must provide the following arguments:

    - `api_host`: Location of the ValidMind API.
    - `api_key`: Account API key.
    - `api_secret`: Account Secret key.
    - `project`: The project identifier. {!project && (

      This can be found in the dashboard URL when navigating to a project page, e.g. for `/projects/cl1jyvh2c000909lg1rk0a0zb` the project identifier is `cl1jyvh2c000909lg1rk0a0zb`

    The following code snippet can be pasted directly into the developer source and should initialize and successfully register with ValidMind when executed:

    ```python
    import validmind as vm

    vm.init(
      api_host = "https://api.dev.vm.validmind.ai/api/v1/tracking",
      api_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      api_secret = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      project = "<project-identifier>"
    )
    ```

## What's Next

Once initialized, the cilent library can be used for logging,
documenting and testing your models.

<!---

Track your first event


```python
{sdkPingSnippet}
```

Initialize the SDK on your python code and track your first
event with `vm.ping()`, if the event is tracked successfully you will see the message below

```python
Awaiting... Success!
```

## Troubleshooting

[Include any common issues or errors that may arise during the task and how to resolve them.]

## Conclusion

[Summarize the task and provide any next steps or resources for the user to continue their learning or work.]


QMD: General getting started w/ initializing developer framework and runnning a simple test via intro notebook ()
Then next steps will be getting started with their own model, for FR it will be time series notebook.
Notebooks are tutorials or how-tos, they are NOT reference! So the notebooks need to move around in the docs
    Could split the getting started up into sections for Developers, Validators, and Admins (and likely get rid of the Guide section)
--->
