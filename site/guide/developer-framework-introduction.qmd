---
title: "Introduction to the ValidMind Developer Framework"
keywords: "developer framework introduction, model risk management, ValidMind"
---

## Brief Introduction

This page provides an introduction for:

- What the ValidMind Developer Framework is, key concepts, and what functionality it provides

- How ValidMind documentation projects are structured

## What ValidMind's Developer Framework is

<!--- TO DO We need a graphic here --->

ValidMind’s Python Developer Framework is a library of developer tools and methods designed to automate the documentation and validation of your models. 

The Developer Framework is designed to be model agnostic. If your model is built in Python, ValidMind’s Python library will provide all the standard functionality without requiring your developers to rewrite any functions. 

The Developer Framework provides a rich suite of documentation tools and test plans, from documenting descriptions of your dataset to testing your models for weak spots and overfit areas. The Developer Framework helps you automate the generation of model documentation by feeding the ValidMind platform with documentation artifacts and test results to the ValidMind platform. 

## ValidMind Documentation Project Structure 

<!--- TO DO This looks more like glossary entries, should we move there? --->

Project
: All documentation work in ValidMind is organized into projects which act as a container for the model documentation and validation report of your model. Each stage of the model’s MRM lifecycle will constitute a new project, and may be configured with its own templates and workflows. 

Model documentation
: Provides a comprehensive record and description of a quantitative model. This documentation should encompass all relevant information about the model in accordance with:

- Regulatory requirements (set by regulatory bodies)
- Model risk policies (set by an institution’s MRM team)
- Assumptions
- Methodologies
- Data and inputs
- Model performance evaluation
- Limitations
- Intended use

The purpose of model documentation is to provide transparency, facilitate understanding, and enable effective governance and oversight of the model.

Template
: Functions as a test suite and lays out the structure of model documentation, segmented into various sections and sub-sections. ValidMind templates come with pre-defined sections, similar to test placeholders, including boilerplates and spaces designated for documentation and test results: 

- Model documentation is populated when a user successfully executes all the tests contained in a template, thereby completing the test suite. 
Template placeholders get populated with content generated by the ValidMind Developer Framework. 
- Essentially, our platform scans these templates, identifies all tests and systematically organizes them into a well-structured test suite.

The criteria for these templates are typically provided by your model risk management team. They can be programmatically customized to suit the unique requirements of each model use case, a task usually performed by an administrator.

Tests
: A function contained in the ValidMind Developer Framework, which is designed to run a specific quantitative test on the dataset or model. Test results are sent to the ValidMind Platform to generate the model documentation according to the relevant templates. 

<!---
## Related Topics

Provide links or references to related topics that users might find useful or interesting. These could be other articles, resources, or tools related to the main topic.
--->