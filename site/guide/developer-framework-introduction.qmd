---
title: "Introduction to the ValidMind Developer Framework"
keywords: "developer framework introduction, model risk management, ValidMind"
---

## Brief Introduction

This page provides an introduction for:

- What the ValidMind Developer Framework is and what functionality it provides

- How ValidMind documentation projects are structured

- What key concepts are associated with the framework

## What ValidMind's Developer Framework is

ValidMind’s Python Developer Framework is a library of developer tools and methods designed to automate the documentation and validation of your models. 

The Developer Framework is designed to be model agnostic. If your model is built in Python, ValidMind’s Python library will provide all the standard functionality without requiring your developers to rewrite functions. 

The Developer Framework provides a rich suite of documentation tools and test plans, from documenting descriptions of your dataset to testing your models for weak spots and overfit areas. The Developer Framework helps you automate the generation of model documentation by feeding the ValidMind platform with documentation artifacts and test results to the ValidMind platform. 

## ValidMind Documentation Project Structure 

* **Projects:**  All documentation work in ValidMind is organized in projects which act as a container for the model documentation and validation report of your model. Each stage of the model’s MRM lifecycle will constitute a new project, and may be configured with its own templates and workflows. 

* **Model Documentation**: A comprehensive record and description of a quantitative model. It should encompass all relevant information about the model in accordance with regulatory requirements (set by regulatory bodies) and model risk policies (set by an institution’s MRM team), assumptions, methodologies, data / inputs, model performance evaluation, limitations, and intended use. The purpose of model documentation is to provide transparency, facilitate understanding, and enable effective governance and oversight of the model.

* **Tests:** A function contained in the ValidMind Developer Framework, which is designed to run a specific quantitative test on the dataset or model. Test results are sent to the ValidMind Platform to generate the model documentation according to the relevant templates. 

* **Test plans:** A collection of many tests which are meant to be run simultaneously to validate and document specific aspects of the documentation. For instance, the tabular_dataset" test plan runs several descriptive and data quality tests on a structured dataset, and documents the results in the ValidMind UI. 

* **Test suites** are collection of tests plans which are meant to run together to automate generate model documentation end-to-end for specific use-cases.

* **Templates**: An outline of the sections/sub-sections of a ValidMind document (Model Documentation or Validation Report), and how they are organized. Templates also contain boilerplates and documentation/test results placeholders for which content will be provided by the Developer Framework. Template requirements are typically provided by the Model Risk Management team, and can be configured programmatically for each model use case, typically by an Administrator. 

The Developer Framework provides a rich suite of documentation tools and test plans, from documenting descriptions of your dataset to testing your models for weak spots and overfit areas. The Developer Framework helps you automate the generation of model documentation by feeding the ValidMind platform with documentation artifacts and test results to the ValidMind platform. 

## ValidMind Documentation project structure

* **Projects:**  All documentation work in ValidMind is organized in projects which act as a container for the model documentation and validation report of your model. Each stage of the model’s MRM lifecycle will constitute a new project, and may be configured with its own templates and workflows. 

* **Model documentation**: A comprehensive record and description of a quantitative model. It should encompass all relevant information about the model in accordance with regulatory requirements, set by regulatory bodies, and model risk policies set by an institution’s MRM team, assumptions, methodologies, data & inputs, model performance evaluation, limitations, and intended use. The purpose of model documentation is to provide transparency, facilitate understanding, and enable effective governance and oversight of the model.

* **Tests:** A function contained in the ValidMind Developer Framework, which is designed to run a specific quantitative test on the dataset or model. Test results are sent to the ValidMind Platform to generate the model documentation according to the relevant templates. 

* **Test plans:** A collection of many tests which are meant to be run simultaneously to validate and document specific aspects of the documentation. For instance, the `tabular_dataset` test plan runs several descriptive and data quality tests on a structured dataset, and documents the results in the ValidMind UI. 

* **Templates**: An outline of the sections and sub-sections of a ValidMind document (model documentation or validation report) and how they are organized. Templates also contain boilerplates and documentation or test result placeholders for which content will be provided by the Developer Framework. Template requirements are typically provided by the model risk management team and can be configured programmatically for each model use case, typically by an administrator. 

<!---
## Related Topics

Provide links or references to related topics that users might find useful or interesting. These could be other articles, resources, or tools related to the main topic.
--->