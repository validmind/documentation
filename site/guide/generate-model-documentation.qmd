---
title: "Generate model documentation"
date: last-modified
---

## How do I use the {{< var vm_framework >}}?

A typical high-level workflow for model developers consists of four major steps:

```{mermaid}
graph LR
    A[Develop<br>model] --> B[Generate model<br>documentation]
    B --> C[Refine model<br>documentation]
    C --> D[Submit for review]
    C --> B
```
<br> 

1. **Develop your model**: In your existing developer environment, build one or more candidate models that need to be validated. This step includes all the usual activities you already follow as a model developer. 

2. **Generate model documentation**: With the {{< var vm_framework >}}, generate automated model documentation and run validation tests. This step includes making use of the automation and testing functionality provided by the {{< var vm_dev >}} and uploading the output to the {{< var vm_ui >}}. You can iteratively regenerate the documentation as you work though the next step of refining your documentation.

3. **Refine model documentation**: In the {{< var vm_platform >}}, review the generated documentation and test output. Iterate over the documentation and test output to refine your model documentation. Collaborate with other developers and model validators to finalize the model documentation and get it ready for review. 

4. **Submit for review**: In the {{< var vm_platform >}}, you submit the model documentation for review which moves the documentation workflow moves to the next phase where a model validator will review it.

Before you can use the {{< var vm_framework >}}, you need to verify that the current documentation template contains all the necessary tests for the model you are developing: 

- The template might already be sufficient and you only need to run the template within the {{< var vm_dev >}} to populate documentation. 

- Or, more likely, the template might need additional tests that you can add these tests via the {{< var vm_dev >}}. 

## How do I generate documentation?

This process of verifying the suitability of the the current documentation template and adding more tests to the template is an iterative process:

```{mermaid}
graph LR
    A[Verify template] --> B[Build template]
    B --> D[Add tests and<br>content blocks]
    D --> E[Add external<br>test providers]
    E --> C[Run template]
    C --> B

```
<br>

Build the template
: When the documentation template requires more tests to be added, or if the documentation template does not include a specific content or test block you need: 
   
   - For functionality provided by the {{< var vm_framework >}}: [Add the relevant tests or content blocks](work-with-content-blocks.qmd) for the model use case. 
    
   - For tests not provided by the {{< var vm_dev >}}: [Add your own external test provider](../notebooks/code_samples/custom_tests/integrate_external_test_providers.ipynb).


Run the template
: When you have registered all the required tests as content blocks in the documentation template, populate the necessary model documentation by adding this call to your model:
   

   ```
   run_documentation_tests()
   ```


::: {.callout-important title="ValidMind may not support all potential use cases or provide a universally applicable documentation template."}
 Typically, you initiate the process of putting ValidMind into production by constructing a template specific for your own use case and then refine your the documentation project.
:::

## End-to end workflow

### In your modeling environment

1. Build your model.

2. Export the datasets and model.

Next, go to **With the {{< var vm_framework >}}, Step 2**.  {{< fa arrow-right >}}

### With the {{< var vm_framework >}}

1. Create a notebook to select and build the relevant tests.

2. {{< fa arrow-right >}} **From your modeling environment**, load the trained datasets and models.

3. {{< fa arrow-right >}} Use the instructions from **In the {{< var vm_ui >}}, Step 3**, [initialize the {{< var vm_framework >}}](install-and-initialize-developer-framework.qmd).

4. Select the relevant tests.

5. Review if all tests are covered by ValidMind or your external test provider:
    
   - If all tests are NOT covered: Create and register additional tests.
   - If all tests are covered: 
      a. Run the selected tests.
      b. Review your test results. 

Next, go to **In the {{< var vm_platform >}}, Step 5**.  {{< fa arrow-right >}} 

### In the {{< var vm_platform >}}

1. [Register a new model](register-models-in-model-inventory.qmd).

2. Review the template structure.

3. [Locate the {{< var vm_dev >}} integration instructions](install-and-initialize-developer-framework.qmd#locate-the-framework-integration-instructions). 
   
4.  Go to **With the {{< var vm_framework >}}, Step 3**. {{< fa arrow-right >}}

5. {{< fa arrow-right >}} After **With the {{< var vm_framework >}}, Step 6**, [add content blocks](work-with-content-blocks.qmd) to your model documentation: 
   
   Select the block type:
   
      - For test-driven blocks: Select from available test provider results
      - For text blocks: 
         
         - For new block:
            - Add new editable text content block
            - Review and collaborate on the content block
         - For existing blocks: Select from available texts from content provider

6. [Submit your documentation project for review](submit-for-approval.qmd).
