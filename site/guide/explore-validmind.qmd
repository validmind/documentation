---
title: "Explore ValidMind"
keywords: "explore, model risk management, ValidMind"
---

## Try the Developer Framework 

To help you understand how the ValidMind Developer Framework works, try our introductory Jupyter notebook. This notebook shows you how to initialize the ValidMind Developer Framework and run functions from on a sample dataset and model trained for demonstration purposes. The model documentation and test results can then be viewed on the ValidMind Platform. 

1. Get access to the notebook source: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1NLtjCFUZV2I_ttGUkiAL9uwGZK_SGUlw?usp=share_link)
  
   Google Colaboratory (Colab) is a free Jupyter notebook environment that runs in the cloud. There, you can work with our Jupyter notebooks, write and execute code, share your work to collaborate in real-time, and export our notebooks to try them out locally in your own developer environment.

2. Make a copy of the notebook for yourself and run it: 
  
   a. In Colab, click **File** > **Save a copy in Drive** > make your own copy in Google Drive so that you can modify the notebook. Alternatively, you can download the notebook source and work with it in your own developer environment.

4. From the **Runtime** drop-down menu at the top, select **Run all**.
   
   The Quickstart notebook will install the ValidMind library and then prompt you to restart the runtime.

5. From the **Runtime** drop-down menu, select **Restart and run all**.

The Quickstart notebook will install the ValidMind library and then run the notebook with your own project's credentials, connecting to the ValidMind Platform. 



## Explore how documentation and test results get uploaded to the ValidMind Platform

The ValidMind Platform is the central place to: 

  - View results and documentation uploaded via the Developer Framework
  - Collaborate with other model developers, model reviewers and validators, and other users involved in the documentation and validation workflow

[![The ValidMind main dashboard](dashboard.png){width=95% fig-align="left" fig-alt="An image showing the ValidMind UI main dashboard"}]({{< var vm_ui >}})


These steps demonstrate how the Developer Framework and the ValidMind Platform work hand-in-hand by using an existing project that goes with our intro notebook.

1. [Log in to the ValidMind UI]({{< var vm_ui >}}).

2. From the side navigation, select **Model Inventory**.

3. Locate or search for the `Customer Churn Model` and select it.

   On the model details page that open, you can find important information about the model, such as:

    - The ID of the model and its specific use case
    - The owners, developers, validators, and business unit associated with the model
    - The risk tier and current version
    - And more

4. Scroll down to **Project History** and select the model.

   On the project details page that opens, you can see what is included, such as documentation, project findings, validation report, and more.

<!-- The Documentation page matters move this link and the one about reviewing documentation to the bottom --->
   
   For this Quickstart, we will focus on the Documentation section to show you how content from the Developer Framework gets uploaded into it. 

   Note that the model status is **In Documentation**. This is the status that a model starts in as part of a documentation project. You can click **See workflow** to look at what the full workflow is, from documentation, to validation, to review, and finally approval. 
    
5. Select **Documentation** > **2. Data preparation** > **2.1. Data description**. 

   ![The Data description page](data-description.png){width=95% fig-align="left" fig-alt="An image showing the data description page in the ValidMind UI"}

   This content is generated by the ValidMind Developer Framework and provides information about the dataset used, including histograms, information about dataset quality, and test results.

   Sections that need your attention get flagged with `Requires Attention`. These sections get flagged automatically by the Developer Framework whenever a test result is above a certain threshold.

6. Select **3. Model Development** and any of the subsection to see information that has been uploaded by the Developer Framework about:

   - Model training
   - Model evaluation
   - Model explainability and interpretability
   - Model diagnosis

The **Documentation Guidelines** in the **ValidMind Insights** right sidebar can tell you more about what these sections mean.

7. Finally, take a look at section **7. Ongoing Monitoring** as well. Sections like **7.1 Ongoing Monitoring Governance** are not generated by the Developer Framework, but they get added by the model developer in the Platform UI.

## Create a new documentation project

Next, let's learn how to create your own documentation project, which you can use to upload tests and documentation, and then add that to your own copy of the intro notebook you looked at earlier.

1. [Log in to the ValidMind UI]({{< var vm_ui >}}).
   
2. On the **Documentation Projects** page, click **Create new project**.
   
3. Select the right options in the form:

   - **Model**: `Customer Churn Model`
   - **Type**: `Initial validation` (selected automatically)
   - **Model Use Case**: `Attrition/Churn Management` (under `Marketing/Sales`)
   - **Project name**: Enter your preferred name

4. Click **Create Project**.

   ValidMind will create an empty documentation project associated with the customer churn model. 
   
   You can now access this project from the UI on the **Documentation Projects** page or by navigating to the relevant model details page in the **Model Inventory** page.

5. On the **Client Integration** page of the newly created project, locate the project identifier, API key and secret:
   
   - `api_host`: The location of the ValidMind API
   - `api_key`: The account API key
   - `api_secret`: The account secret key
   - `project`: The project identifier

<!--- TO DO --->
IMPORTANT USE COPY TO CLIPBOARD **Copy to Clipboard**

   The code snippet can be copied and pasted directly into your developer source code to integrate the ValidMind Developer Framework and to be able to upload to the ValidMind Platform or you can store it in a `.env` file and pass in the secrets via environment variables to follow security best practices

## Modify the Quickstart notebook to upload to your own project

1. Reopen the Quickstart notebook you looked at earlier.

2. In the Quickstart notebook, replace the `vm.init()` lines that look like the following with _your own client integration information_ from the earlier step when you created your new project:

   [![The Quickstart notebook in Colab](google-colab-secrets.png){width=95% fig-align="left" fig-alt="The Quickstart notebook in Colab with the section showing that you need to replace"}]({{< var vm_ui >}})

3. From the **Runtime** drop-down menu at the top, select **Run all**.
   
   The Quickstart notebook will install the ValidMind library and then prompt you to restart the runtime.


You can now switch back to the Platform UI and view the documentation that has been uploaded by the Developer Framework. 

## What's next

Ready to use ValidMind for production with your own use cases? [Follow our how-to guides](guide.qmd).

## Related topics

- [Introduction to the ValidMind Developer Framework](developer-framework-introduction.qmd). 
- [Review and comment on documentation projects](review-documentation-project.qmd)
