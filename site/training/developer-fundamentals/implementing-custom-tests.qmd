---
title: "Implementing <br>Custom Tests"
subtitle: "Developer Fundamentals — Module 3 of 4<br><br>_Click [{{< fa chevron-right >}}](#learning-objectives) to start_"
lightbox: true
format:
  revealjs:
    controls: true
    controls-tutorial: true
    help: true
    controls-back-arrows: visible
    transition: slide
    theme: [default, ../assets/slides.scss]
    slide-number: true
    chalkboard: false
    preview-links: auto
    view-distance: 2
    logo: /validmind.png
    footer: "{{< var validmind.training >}} | [Home {{< fa person-walking-dashed-line-arrow-right >}}](/training/training.qmd)"
  html:
  # Change this to the file name prepended by a _ to get around the global HTML output settings required by _metadata.yml
    output-file: _implementing-custom-tests.html
    search: false
title-slide-attributes:
  data-background-color: "#083E44"
  data-background-image: "../assets/home-hero.svg"
skip_preview: true
---

# Learning objectives {.center}

_"As a **developer** who has run and logged out-of-the-box tests with {{< var vm.product >}}, I want to update my documentation template to include manually inserted test results, implement, run, and log custom tests, and include those custom tests in my documentation template."_

::: {.tc}
<br>
This third module is part of a four-part series:
<br><br>
[Developer Fundamentals](/training/developer-fundamentals/developer-fundamentals-register.qmd){.button target="_blank"}
:::


## Module 3 — Contents {.center}

:::: {.columns .f3}
::: {.column width="50%" .mt4 .pr4}
### Introduction
- [{{< var vm.product >}} for model development](#validmind-for-model-development)
:::

:::

:::: {.columns .f3}

::: {.column width="50%" .mt4 .pr4}
### Section 1

- [Implement custom inline tests](#implement-custom-tests)
- [Use external test providers](#use-external-test-providers)

:::

::: {.column width="50%" .mt4}
### Section 2

- [Include custom test results](#include-custom-test-results)
- [Configure the model's documentation template](#configure-documentation-templates)
:::

::::


<br>
First, let's make sure you can log in to {{< var vm.product >}}.

{{< include /training/assets/_revealjs-navigation.qmd >}}

## Before you begin {.center}

::: {.panel-tabset}

### Prerequisite course

To continue, you need to have been [onboarded](developer-fundamentals-register.qmd#register){target="_blank"} onto {{< var validmind.training >}} with the [**{{< fa code >}} Developer**]{.bubble} role and completed the first two modules of this course:


<!-- IMPORTANT: USE THE .HTML PATH AND NOT THE .QMD PATH FOR THE REVEALJS OUTPUT -->

:::: {.columns}
::: {.column width="60%"}
::: {.tc}
[Using {{< var vm.product >}} for model development](using-validmind-for-model-development.html){.button target="_blank"}
:::

:::
::: {.column width="40%"}
::: {.tc}
[Learning to run tests](learning-to-run-tests.html){.button target="_blank"}
:::

:::
::::

:::: {.tc .mt5 .f2 .embed}
Already logged in and refreshed this module? Click [{{< fa chevron-right >}}]() to continue.

:::

### Log in

1. Log in to check your access:

:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns .tc}

[Log in to JupyterHub](https://jupyterhub.validmind.ai/){.button target="_blank"}

:::

::: {.w-50-ns .tc}
[Log in to {{< var vm.product >}}](https://app.prod.validmind.ai){.button target="_blank"}
:::

::::


::: {.tc .f3}
Be sure to return to this page afterwards.
:::

2. After you successfully log in, refresh the page to connect this training module up to the {{< var validmind.platform >}}: 

::: {.tc}
<button class="button" onClick="window.location.reload();">Refresh Page</button>

:::

:::

<!-- USING THE VARIABLE IN THE HEADING MESSES UP THE PAGE ANCHOR -->

# ValidMind for model development {background-color="#083E44" background-image="/training/assets/home-hero.svg"}

## {.scrollable .center}

:::: {.columns}
::: {.column width="30%" .pr4 .f2}
Jupyter Notebook series

::: {.f3}
When you run these notebooks, they will generate a draft of model documentation and upload it to {{< var vm.product >}}, complete with test supporting test results.

::: {.f5 .nt2 .pl2 .mb4}
<br>

You will need to have already completed notebooks **1** and **2** during the first and second modules to proceed.

:::

:::
:::

::: {.column width="70%" .bl .pl4 .f3}
### {{< var vm.product >}} for model development

Our series of four introductory notebooks for model developers include sample code and how-to information to get you started with {{< var vm.product >}}:

1 — [Set up the {{< var validmind.developer >}}](/notebooks/tutorials/model_development/1-set_up_validmind.ipynb){target="_blank"}<br>
2 — [Start the model development process](/notebooks/tutorials/model_development/2-start_development_process.ipynb){target="_blank"}<br>
3 — [Integrate custom tests](/notebooks/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}<br>
4 — [Finalize testing and documentation](/notebooks/tutorials/model_development/4-finalize_testing_documentation.ipynb){target="_blank"}<br>
<br>

::: {.f4 .pl3 .pr3 .embed}
In this third module, we'll run through the remaining two notebooks **3** in Section 1 and **4** in Section 2 together.
:::

:::
::::

Let's continue our journey with **Section 1** on the next page. {{< fa hand-point-right >}}

# Section 1 {background-color="#083E44" background-image="/assets/img/about-us-esphere.svg"}

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html" background-interactive="yes" data-preload="yes"}

:::: {.absolute bottom=15 left=0 right=50 .w-100 .f4 .tc .pl4 .pr4 .overlay}
**3 — Integrate custom tests**

::: {.f5}
This is the third notebook in our introductory series, which will walk you through how to implement different types of custom tests with {{< var vm.product >}}.

:::

**Scroll through this notebook** to explore. When you are done, click [{{< fa chevron-right >}}]() to continue.

::::

## Get your code snippet

:::: {.columns}

::: {.column width="80%"}

<!-- FOR COPYING THE CODE SNIPPET WE NEED TO USE THIS IFRAME WORKAROUND -->

<div style="zoom: 0.6; overflow: hidden;">
  <iframe 
    src="https://app.prod.validmind.ai/model-inventory" 
    width="100%" 
    height="750" 
    style="border: 1px solid #083E44; border-radius: 8px; border-right-width: 2px; border-bottom-width: 3px;"
    data-preload="yes" 
    sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
    allow="clipboard-read; clipboard-write">
  </iframe>
</div>

:::

::: {.column width="20%" .f4}

::: {.f5}
{{< var vm.product >}} generates a unique *code snippet* for each registered model to connect with your developer environment:

1. From the **{{< fa cubes >}} Inventory**, select the name of your model to open up the model details page.
2. On the left sidebar that appears for your model, click **Getting Started**.
3. Locate the code snippet and click **Copy snippet to clipboard**.

:::

When you're done, click [{{< fa chevron-right >}}]() to continue.

:::

::::

:::: {.tc .f6 .embed}
**Can't load the {{< var validmind.platform >}}?**

Make sure you're logged in and have refreshed the page in a Chromium-based web browser.

:::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#initialize-the-validmind-library" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Connect to your model**

::: {.f5}
With your code snippet copied to your clipboard:

1. Open **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run all the cells under the **Setting up** section.

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

# Implement custom tests {background-color="#083E44" background-image="/training/assets/home-hero.svg"}

## {.scrollable .center}

:::: {.columns}
::: {.column width="30%" .pr4 .f2}
Custom inline tests

<br>Try it **live** on the next pages. {{< fa hand-point-right >}}

:::

::: {.column width="70%" .bl .pl4 .f3}
Let's implement a custom *inline test* that calculates the confusion matrix for a binary classification model.

- An inline test refers to a test written and executed within the same environment as the code being tested — in the following example, right in our Jupyter Notebook —  without requiring a separate test file or framework.
- You'll note that the custom test function is just a regular Python function that can include and require any Python library as you see fit.

:::
::::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#create-a-confusion-matrix-plot" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Create a custom test**

::: {.f5}
The [`@vm.test` wrapper](/validmind/validmind.qmd#test){target="_blank"} allows you to create a reusable test:

1. Continue with **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run all the cells in the following section under Implementing a custom inline test: **Create a confusion matrix plot**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#add-parameters-to-custom-tests" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Adjust your custom test**

::: {.f5}
Custom tests can take parameters just like any other function:

1. Continue with **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run all the cells in the following sections under Implementing a custom inline test: <br>**Add parameters to custom tests** / **Pass parameters to custom tests**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#log-the-confusion-matrix-results" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Log your custom test**

::: {.f5}
Use the [`.log()` method](/validmind/validmind/vm_models.qmd#log){target="_blank"} to send the results of your custom test to the {{< var validmind.platform >}}:

1. Continue with **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run the cell in the following section under Implementing a custom inline test: **Log the confusion matrix results**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::


# Use external test providers {background-color="#083E44" background-image="/training/assets/home-hero.svg"}

## {.scrollable .center}

:::: {.columns}
::: {.column width="30%" .pr4 .f2}
Reusable custom tests

<br>Try it **live** on the next pages. {{< fa hand-point-right >}}

:::

::: {.column width="70%" .bl .pl4 .f3}
### External test providers

Creating inline custom tests with a function is a great way to customize your model documentation.

- However, sometimes you may want to reuse the same set of tests across multiple models and share them with others in your organization.
- In this case, you can create an external custom test provider that will allow you to load custom tests from a local folder or a Git repository.

:::
::::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#create-custom-tests-folder" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Create custom tests folder**

::: {.f5}
Create a new folder that will contain reusable custom tests from your existing inline tests:

1. Continue with **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run the cell under the following Using external test providers section: **Create custom tests folder**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#save-an-inline-test" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Save inline test**

::: {.f5}
The `@vm.test` decorator also includes a convenience method that allows you to save the test to a Python file at a specified path:

1. Continue with **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run all the cells under the Using external test providers section: **Save an inline test**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {background-iframe="/notebooks/EXECUTED/model_development/3-integrate_custom_tests.html#register-a-local-test-provider" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Register local test provider**

::: {.f5}
Next, let's initialize a test provider that will tell the {{< var validmind.developer >}} where to find your saved custom tests:

1. Continue with **3 — Integrate custom tests**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/3-integrate_custom_tests.ipynb){target="_blank"}
2. Run all the cells under the Using external test providers section: **Register a local test provider**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {.scrollable}

:::: {.columns}
::: {.column width="30%" .pr4 .f2}
Custom test results

::: {.f5 .nt2 .pl2 .mb4}
(Scroll down for the full instructions.)
:::

::: {.tc}
[Learn more ...](/notebooks/EXECUTED/model_development/3-integrate_custom_tests.ipynb#add-test-results-to-documentation){.button target="_blank"}

:::

<br>Try it **live** on the next page. {{< fa hand-point-right >}}

:::

::: {.column width="70%" .bl .pl4 .f4}
### Add test results to model documentation

With the custom test results logged, let's head to the model we connected to at the beginning of this notebook and insert our test results into the documentation:

1. From the **{{< fa cubes >}} Inventory** in the {{< var validmind.platform >}}, go to the model you connected to earlier.

2. In the left sidebar that appears for your model, click **{{< fa book-open >}} Documentation**.

3. Locate the Data Preparation section and click on **3.2 Model Evaluation** to expand that section.

4. Hover under the Pearson Correlation Matrix content block until a horizontal dashed line with a **+** button appears, indicating that you can insert a new block.

5. Click **+** and then select **Test-Driven Block** under [from library]{.smallcaps}:

    - Click on **Custom** under [test-driven]{.smallcaps} in the left sidebar.
    - Select the two custom `ConfusionMatrix` tests you logged above:

    ![The ConfusionMatrix tests selected](/notebooks/EXECUTED/model_development/selecting-confusion-matrix-test.png){fig-alt="Screenshot showing the ConfusionMatrix tests selected" .screenshot}

6. Finally, click **Insert 2 Test Results to Document** to add the test results to the documentation.

    Confirm that the two individual results for the confusion matrix tests have been correctly inserted into section **3.2 Model Evaluation** of the documentation.

:::
::::


## {background-iframe="https://app.prod.validmind.ai/model-inventory/" background-interactive="true" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f5 .tc .pl4 .overlay}
**Insert custom test-driven blocks**

::: {.f6}
3.2 Model Evaluation — `my_custom_tests.ConfusionMatrix:test_dataset_normalized` / `my_test_provider.ConfusionMatrix`

:::

When you're done, click [{{< fa chevron-right >}}]() to continue.

::::



# Section 2 {background-color="#083E44" background-image="/assets/img/about-us-esphere.svg"}

## {background-iframe="/notebooks/EXECUTED/model_development/4-finalize_testing_documentation.html" background-interactive="yes" data-preload="yes"}

:::: {.absolute bottom=15 left=0 right=50 .w-100 .f4 .tc .pl4 .pr4 .overlay}
**4 — Finalize testing and documentation**

::: {.f5}
This is the final notebook in our introductory series, which will walk you through wrapping custom test results into your documentation, as well as how to update the configuration for the entire model documentation template to suit your needs.
:::

**Scroll through this notebook** to explore. When you are done, click [{{< fa chevron-right >}}]() to continue.

::::

## Retrieve your code snippet

:::: {.columns}

::: {.column width="80%"}

<!-- FOR COPYING THE CODE SNIPPET WE NEED TO USE THIS IFRAME WORKAROUND -->

<div style="zoom: 0.6; overflow: hidden;">
  <iframe 
    src="https://app.prod.validmind.ai/model-inventory" 
    width="100%" 
    height="750" 
    style="border: 1px solid #083E44; border-radius: 8px; border-right-width: 2px; border-bottom-width: 3px;"
    data-preload="yes" 
    sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
    allow="clipboard-read; clipboard-write">
  </iframe>
</div>

:::

::: {.column width="20%"}

::: {.f4}
As usual, let's connect back up to your model in the {{< var validmind.platform >}}:

1. From the **{{< fa cubes >}} Inventory**, select the name of your model to open up the model details page.
2. On the left sidebar that appears for your model, click **Getting Started**.
3. Locate the code snippet and click **Copy snippet to clipboard**.

:::

:::

::::

When you're done, click [{{< fa chevron-right >}}]() to continue.

## {background-iframe="/notebooks/EXECUTED/model_development/4-finalize_testing_documentation.html#initialize-the-validmind-library" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Connect to your model**

::: {.f5}
With your code snippet copied to your clipboard:

1. Open **4 — Finalize testing and documentation**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/4-finalize_testing_documentation.ipynb){target="_blank"}
2. Run all the cells under the **Setting up** section.

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

# Include custom test results {background-color="#083E44" background-image="/training/assets/home-hero.svg"}

## {background-iframe="/notebooks/EXECUTED/model_development/4-finalize_testing_documentation.html#reconnect-to-validmind" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Reconnect to {{< var vm.product >}}**

::: {.f5}
After you insert test-driven blocks, changes should persist and become available every time you call the [`preview_template()` function](/validmind/validmind.qmd#preview_template){target="_blank"}:

1. Continue with **4 — Finalize testing and documentation**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/4-finalize_testing_documentation.ipynb){target="_blank"}
2. Run all the cells under the **Reconnect to {{< var vm.product >}}** section.

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {background-iframe="/notebooks/EXECUTED/model_development/4-finalize_testing_documentation.html#include-custom-test-results" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Log custom test results**

::: {.f5}
Now that your custom test IDs are part of your template, you can now run tests for an entire section and all additional custom tests will be loaded:

1. Continue with **4 — Finalize testing and documentation**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/4-finalize_testing_documentation.ipynb){target="_blank"}
2. Run the cell under the **Include custom test results** section.

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::


# Configure documentation templates {background-color="#083E44" background-image="/training/assets/home-hero.svg"}

## {.scrollable .center}

:::: {.columns}
::: {.column width="30%" .pr4 .f2}
Documentation template configuration

::: {.tc}
[Learn more ...](/validmind/validmind/vm_models.qmd#get_default_config){.button target="_blank"}

:::

<br>Try it **live** on the next pages. {{< fa hand-point-right >}}
:::

::: {.column width="70%" .bl .pl4 .f3}
### `get_default_config()`

The utility function `vm.get_test_suite().get_default_config()` will return the default configuration for the entire documentation template as a dictionary:

- This configuration will contain all the test IDs and their default parameters.
- You can then modify this configuration as needed and pass it to `run_documentation_tests()` to run all tests in the documentation template if needed.
- You still have the option to continue running tests for one section at a time; `get_default_config()` simply provides a useful reference for providing default parameters to every test.

:::
::::

## {background-iframe="/notebooks/EXECUTED/model_development/4-finalize_testing_documentation.html#documentation-template-configuration" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Retrieve default configuration**

::: {.f5}
1. Continue with **4 — Finalize testing and documentation**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/4-finalize_testing_documentation.ipynb){target="_blank"}
2. Run the first cell under the **Documentation template configuration** section.

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::

## {background-iframe="/notebooks/EXECUTED/model_development/4-finalize_testing_documentation.html#update-the-config" data-preload="yes"}

:::: {.absolute bottom=15 .w-100 .f4 .tc .pl4 .overlay}
**Update template configuration**

::: {.f5}
The default configuration does not assign any inputs to a test, but you can assign inputs to individual tests as needed:

1. Continue with **4 — Finalize testing and documentation**: [{{< fa square-arrow-up-right >}} JupyterHub](https://jupyterhub.validmind.ai/hub/user-redirect/lab/tree/tutorials/model_development/4-finalize_testing_documentation.ipynb){target="_blank"}
2. Run the all the cells under the following Documentation template configuration section: **Update the config**

:::

When you're done, return to this page and click [{{< fa chevron-right >}}]() to continue.

::::


# In summary {background-color="#083E44" background-image="/training/assets/home-hero.svg"}

## {.scrollable .center}

:::: {.columns}
::: {.column width="30%" .pr4 .f2}
Implementing custom tests

:::

::: {.column width="70%" .bl .pl4 .f3}
In this third module, you learned how to:

- [x] Implement, run, and log custom inline tests
- [x] Register external test providers for reusable custom tests
- [x] Include custom test results in your documentation template
- [x] Configure your model's documentation template

:::
::::

::: {.tc}
<br>
Continue your model development journey with:
<br><br>
<!-- IMPORTANT: USE THE .HTML PATH AND NOT THE .QMD PATH FOR THE REVEALJS OUTPUT -->
[Finalizing model documentation](finalizing-model-documentation.html){.button target="_blank"}
:::