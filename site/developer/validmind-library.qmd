---
title: "{{< var validmind.developer >}}"
date: last-modified
aliases:
  - /guide/get-started-developer-framework.html
  - /guide/developer-framework.html
  - /guide/restapi.html
  - get-started-developer-framework.html
  - get-started-validmind-library.html
listing:
  - id: library-quickstart
    type: grid
    max-description-length: 250
    sort: false
    fields: [title, description]
    grid-columns: 2
    contents:
    - ../notebooks/quickstart_customer_churn_full_suite.ipynb
    - path: https://youtu.be/rIR8Mql7eGs
      title: "{{< fa brands youtube >}} {{< var vm.product >}} QuickStart"
      description: "Watch the walkthrough on YouTube: `https://youtu.be/rIR8Mql7eGs`"
    # - ../notebooks/tutorials/intro_for_model_developers.ipynb
#    - developer-getting-started-video.qmd
  - id: model-development
    type: grid
    grid-columns: 2
    max-description-length: 250
    contents:
    - path: ../notebooks/tutorials/model_development/1-set_up_validmind.ipynb
      title: "1 — Set up the {{< var validmind.developer >}}"
      description: "Get to know {{< var vm.product >}} by setting up the {{< var validmind.developer >}} in your own environment, and registering a sample binary classification model in the {{< var validmind.platform >}} for use with this series of notebooks."
    - path: ../notebooks/tutorials/model_development/2-start_development_process.ipynb
      title: "2 — Start the model development process"
      description: "Learn to run and log tests with a variety of methods and in different situations with the {{< var validmind.developer >}}, then add the results or evidence to your documentation for the sample model you registered."
    - path: ../notebooks/tutorials/model_development/3-integrate_custom_tests.ipynb
      title: "3 — Integrate custom tests"
      description: "After you become familiar with the basics of the {{< var validmind.developer >}}, learn how to supplement ValidMind tests with your own and include them as additional evidence in your documentation. "
    - path: ../notebooks/tutorials/model_development/4-finalize_testing_documentation.ipynb
      title: "4 — Finalize testing and documentation"
      description: "Wrap up by learning how to ensure that custom tests are included in your model's documentation template. By the end of this series, you will have a fully documented sample model ready for review."
  - id: model-validation
    type: grid
    grid-columns: 2
    max-description-length: 250
    contents:
    - path: ../notebooks/tutorials/model_validation/1-set_up_validmind_for_validation.ipynb
      title: "1 — Set up the {{< var validmind.developer >}} for validation"
      description: "Get to know {{< var vm.product >}} by setting up the {{< var validmind.developer >}} in your own environment, and gaining access as a validator to a sample model in the {{< var validmind.platform >}} for use with this series of notebooks."
    - path: ../notebooks/tutorials/model_validation/2-start_validation_process.ipynb
      title: "2 — Start the model validation process"
      description: "Independently verify the data quality tests performed on datasets used to train the dummy champion model using tests from the {{< var validmind.developer >}}, then add the results or evidence to your validation report."
    - path: ../notebooks/tutorials/model_validation/3-developing_challenger_model.ipynb
      title: "3 — Developing a potential challenger model"
      description: "After you become familiar with the basics of the {{< var validmind.developer >}}, use it to develop a potential challenger model and run thorough model comparison tests, such as performance, diagnostic, and feature importance tests."
    - path: ../notebooks/tutorials/model_validation/4-finalize_validation_reporting.ipynb
      title: "4 — Finalize validation and reporting"
      description: "Wrap up by learning how to include custom tests and verifying that all tests conducted during model development were run and reported accurately. By the end of this series, you will have a validation report complete with findings ready for review."
  - id: run-tests
    grid-columns: 2
    type: grid
    max-description-length: 250
    sort: false
    fields: [title, description]
    contents: 
    - ../notebooks/how_to/run_tests/1_run_dataset_based_tests.ipynb
#    - ../notebooks/archive/configure_test_parameters.ipynb
    - ../notebooks/code_samples/custom_tests/implement_custom_tests.ipynb
  - id: code-samples
    type: grid
    max-description-length: 250
    sort: false
    fields: [title, description]
    contents: 
    - ../notebooks/code_samples/custom_tests/integrate_external_test_providers.ipynb
    - ../notebooks/code_samples/nlp_and_llm/prompt_validation_demo.ipynb
    - ../notebooks/code_samples/time_series/quickstart_time_series_full_suite.ipynb
  - id: library-documentation
    type: grid
    grid-columns: 2
    max-description-length: 250
    sort: false
    fields: [title, description]
    contents:
    - ../guide/model-documentation/work-with-test-results.qmd
    - ../guide/model-documentation/work-with-content-blocks.qmd
---

The {{< var validmind.developer >}} helps you streamline model documentation by automating the generation of drafts. All you need to do is upload your documentation artifacts and test results to the {{< var validmind.platform >}}.

## What is the {{< var validmind.developer >}}?

The {{< var validmind.developer >}} provides a rich collection of documentation tools and test suites, from documenting descriptions of your dataset to validation testing your models for weak spots and overfit areas. 

{{< var vm.product >}} offers two primary methods for automating model documentation:

- **Generate documentation**[^1] — Through automation, the {{< var vm.developer >}} extracts metadata from associated datasets and models for you and generates model documentation based on a template. You can also add more documentation and tests manually using the documentation editing capabilities in the {{< var validmind.platform >}}.

- **Run validation tests**[^2] — The {{< var vm.developer >}} provides a suite of validation tests for common financial services use cases. For cases where these tests do not cover everything you need, you can also extend existing test suites with your own proprietary tests or testing providers. 

The {{< var validmind.developer >}} is designed to be model agnostic. If your model is built in Python, the {{< var vm.developer >}} provides all the standard functionality you may need without requiring you to rewrite any functions.

::: {.callout-important collapse="true" appearance="minimal"}
## {{< fa building-columns >}} Key {{< var vm.product >}} concepts

<!--- These concepts were already introduced in the "Get started" section. They are repeated here in a collapsed format in case a reader missed them earlier. --->

{{< include /about/glossary/key_concepts/_key-concepts.qmd >}}

:::

## QuickStart

After you [**sign up**](/guide/configuration/accessing-validmind.qmd) for {{< var vm.product >}} to get access, try our QuickStart:

:::{#library-quickstart}
:::

<span id="development"></span>

## {{< var vm.product >}} for model development

Learn how to use ValidMind for your end-to-end model documentation process based on common model development scenarios with our *ValidMind for model development* series of four introductory notebooks:

:::{#model-development}
:::

<span id="validation"></span>

## {{< var vm.product >}} for model validation

Learn how to use ValidMind for your end-to-end model validation process based on common scenarios with our *ValidMind for model validation* series of four introductory notebooks:

:::{#model-validation}
:::


## Learn how to run tests

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
The {{< var validmind.developer >}} provides many built-in tests and test suites which make it easy for developers to automate their model documentation. Start by running a pre-made test, then modify it, and finally create your own test:

:::

::: {.w-30-ns .tc}
[Run tests & test suites](model-testing/testing-overview.qmd){.button .button-green}

:::

::::

:::{#run-tests}
:::

## Try the code samples

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
Our code samples showcase the capabilities of the {{< var validmind.developer >}}. Examples that you can build on and adapt for your own use cases include:

:::

::: {.w-30-ns .tc}
[All code samples](samples-jupyter-notebooks.qmd){.button .button-green}

:::

::::

:::{#code-samples}
::: 

## Work with model documentation

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
After you have tried out the {{< var validmind.developer >}}, continue working with your model documentation in the {{< var validmind.platform >}}:

:::

::: {.w-40-ns .tc}
[Working with model documentation](/guide/model-documentation/working-with-model-documentation.qmd){.button .button-green}

:::

::::

:::{#library-documentation}
:::


<!-- FOOTNOTES -->

[^1]: [{{< var vm.product >}} for model development](#development)

[^2]: [{{< var vm.product >}} for model validation](#validation)