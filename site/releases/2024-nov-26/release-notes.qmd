---
title: "November 26, 2024"
lightbox: true
filters:
  - tachyons
  - preview
listing:
  - id: library
    type: grid
    grid-columns: 1
    max-description-length: 250
    # image-height: 100%
    contents:
      - path: ../../about/overview-model-documentation.qmd
        title: "Learn more — {{< var validmind.developer >}}"
        description: "The {{< var validmind.developer >}} is a Python library and documentation engine designed to streamline the process of documenting various types of models."
    fields: [title, description]
  - id: platform
    type: grid
    grid-columns: 1
    max-description-length: 250
    # image-height: 100%
    contents:
      - path: ../../about/overview-model-risk-management.qmd
        title: "Learn more — {{< var validmind.platform >}}"
        description: "The {{< var validmind.platform >}} offers an integrated solution to manage validation reports, track findings, and report on model risk compliance across your model portfolio."
    fields: [title, description]
  - id: academy
    type: grid
    grid-columns: 1
    max-description-length: 250
    # image-height: 100%
    contents:
      - path: ../../training/training.qmd
        title: "{{< fa graduation-cap >}} {{< var validmind.training >}}"
        description: "Our free training courses make navigating AI and governance straightforward, practical, and even fun — gain hands-on experience and discover the platform that simplifies model risk management!"
    fields: [title, description]
---

We've chosen some new names for our product offerings, expanding our training courses, introduced new large language models (LLMs) features — and much, much, more!

::: {.highlights}

## {{< fa bullhorn >}} Release highlights

### {{< var validmind.developer >}} (v2.5.25)

<!---
PR #1044: [SC-6649] replace developer framework with library
URL: https://github.com/validmind/frontend/pull/1044
Labels: enhancement
--->

#### {{< var vm.product >}} Developer Framework > {{< var validmind.developer >}}

:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns}
To reduce ambiguity and highlight the capabilities of our developer tools, as of `v2.5.25` what was previously referred to as the {{< var vm.product >}} Developer Framework is now known as the **{{< var validmind.developer >}}**.


:::

::: {.w-40-ns}
:::{#library}
:::

:::

::::

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns .tc}
[Get started with the {{< var validmind.developer >}}](/developer/get-started-validmind-library.qmd){.button .button-green}

:::

::: {.w-30-ns .tc}
[{{< var validmind.developer >}} reference](/validmind/validmind.html){.button .button-green target="_blank"}

:::

::: {.w-30-ns .tc}
[{{< fa brands github >}} validmind-library](https://github.com/validmind/validmind-library){.button .button-green target="_blank"}

:::

::::

::: {.callout}
## {{< var validmind.developer >}} enhancements[^1]
In addition to the enhancements in this release, references to the developer framework have been replaced across the {{< var validmind.developer >}} package and open-source repository, as well as the {{< var validmind.platform >}}, and the user documentation.

:::


### {{< var validmind.platform >}} (v1.27.7)

#### {{< var vm.product >}} Platform UI > {{< var validmind.platform >}} 

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
To reduce ambiguity and highlight the capabilities of our cloud-hosted interface, as of `v1.27.7` what was previously referred to as the {{< var vm.product >}} Platform UI is now simply known as the **{{< var validmind.platform >}}**.

:::: {.flex .flex-wrap .justify-around}
::: {.w-50-ns .tc}
[{{< var validmind.platform >}} guides](/guide/guides.qmd){.button .button-green}

:::

::: {.w-40-ns .tc}
[Accessing {{< var vm.product >}}](/guide/configuration/accessing-validmind.qmd){.button .button-green}

:::

::::

:::

::: {.w-30-ns}
:::{#platform}
:::
:::

::::


::: {.callout}
## {{< var validmind.platform >}} enhancements[^2]
In addition to the enhancements in this release, references to the platform UI have been replaced across the {{< var validmind.developer >}} package and open-source repository, as well as the {{< var validmind.platform >}}, and the user documentation.

:::

<!---
PR #1048: Product Feedback
URL: https://github.com/validmind/frontend/pull/1048
Labels: enhancement
--->
#### Submit product feedback directly

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}

You can now submit feature requests, bug reports, or any other feedback directly within the {{< var validmind.platform >}}.

Click on the **Talk to us.** tab on the right-hand side of any screen and follow three easy steps:

::: {.tc}
[Submit feedback](/support/support.qmd){.button .button-green}
:::

:::

::: {.w-30-ns}

![The `Talk to us.` feedback panel within the {{< var validmind.platform >}}](/support/talk-to-us.png){fig-alt="A screenshot showing the `Talk to us.` feedback panel within the ValidMind Platform" .screenshot}

:::

::::


<!---
PR #1068: New reporting (Milestone 1)
URL: https://github.com/validmind/frontend/pull/1068
Labels: enhancement
--->
#### Support for custom analytics

You can now add, edit, or remove custom data to your analytics within the {{< var validmind.platform >}} in two steps:

:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns}

1. **Add custom analytic pages** — Custom analytics pages allow you to add custom visualizations on top of the out-of-the-box reports provided by {{< var vm.product >}}.
2. **Add custom visualizations** — A visualization is a custom reporting widget that retrieves data on your metric of choice. Choose from bar charts, pie charts, or a simple counter.

::: {.tc}
[Manage custom reports](/guide/reporting/manage-custom-reports.qmd){.button .button-green}
:::

:::

::: {.w-50-ns .tc}
![Example setup for a custom stacked bar chart](/guide/reporting/custom-visualization-setup.png){width=85% fig-alt="An screenshot of an example setup for a custom stacked bar chart" .screenshot}

:::

::::

### Documentation

#### Updated product terminology

<!-- MANUAL ADD: 
https://github.com/validmind/documentation/pull/521 -->

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
In concert with our product renaming across the {{< var validmind.developer >}} and the {{< var validmind.platform >}}, we've edited all user guides and external facing documentation to reflect these updates.

Of note is the **{{< fa cube >}} Developers** drop-down menu, previously called {{< fa cube >}} Developer Framework.

:::

::: {.w-30-ns .tc}

[{{< var vm.product >}} product names](/about/contributing/style-guide/conventions.qmd#product-names){.button .button-green}

[{{< fa cube >}} Developers](/developer/get-started-validmind-library.qmd){.button .button-green}


:::

::::



#### New {{< var vm.product >}} branding
<span id="new-branding"></span>

<!-- MANUAL ADD: 
New homepage & search: https://github.com/validmind/documentation/pull/465 
New colors & logo: https://github.com/validmind/documentation/pull/366
New sidebar & ToC theme: https://github.com/validmind/documentation/pull/524 -->

Along with keeping our content up to date,[^3] we've refreshed the look and feel of our documentation to reflect {{< var vm.product >}}'s new brand colors used on our main website[^4] and within the {{< var validmind.platform >}}. 

##### Improved documentation homepage
:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns}
We've overhauled the documentation homepage. Check it out:

- More quick links out to popular user guides,
- New sections for training collateral and latest releases, 
- And updated search functionality!

::: {.tc}
[Documentation homepage](https://docs.validmind.ai/){.button .button-green}
:::

:::

::: {.w-40-ns .tc}
![A question entered into the new homepage search functionality](new-search-box.png){fig-alt="A screenshot of a question entered into the new homepage search functionality" .screenshot}

:::

::::

##### Updated logo and theme
The {{< var vm.product >}} logo has been updated across the documentation, and a new style applied to our side navigation and table of contents to unify the experience across our products: 

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns .tc}
![Old documentation site theme](old-site-theme.png){fig-alt="A screenshot of the old documentation site theme" .screenshot}

:::

::: {.w-40-ns .tc}
![New documentation site theme](new-site-theme.png){fig-alt="A screenshot of the new documentation site theme" .screenshot}

:::

::::


#### {{< var validmind.training >}} portal
<span id="validmind-academy"></span>

<!-- MANUAL ADD — Training style overhaul:
https://github.com/validmind/documentation/pull/501
https://github.com/validmind/documentation/pull/509 
https://github.com/validmind/documentation/pull/497 -->

To complement our rebranding,[^5] our {{< var validmind.training >}} training now features its own theme and landing page to distinguish the material from the rest of the documentation along with content updates.[^6]

:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns}

- This new training homepage makes it easier for you to find and register for courses.
- Each course offered now includes a preview of the learning objectives and an estimated duration, to inform your instruction experience.

:::

::: {.w-40-ns}
:::{#academy}
:::

:::

::::


:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns .tc}
![Old training landing page](old-training-landing.png){fig-alt="A screenshot of the old training landing page" .screenshot}

:::

::: {.w-40-ns .tc}
![New training landing page](new-training-landing.png){fig-alt="A screenshot of the new training landing page" .screenshot}

:::

::::

<!---
PR #510: Document LLM features
URL: https://github.com/validmind/documentation/pull/510
Labels: documentation
--->
#### {{< var vm.product >}} LLM feature overview

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
{{< var vm.product >}} offers several specialized features that use large language models (LLMs), such as our **Document Checker**. These features streamline model risk management and ensure regulatory compliance. 

We've created a guide on how we approach these features and what you need to know:

::: {.tc}
[Large language model features](/about/overview-llm-features.qmd){.button .button-green}
:::

:::

::: {.w-30-ns}
![Document Checker](/about/overview-llm-features-check-document.png){fig-alt="A screenshot showing the LLM feature for checking documents that can be accessed with the Check Document button" .screenshot}

:::

::::

:::


## Enhancements

### {{< var validmind.developer >}} (v2.5.25)
<span id="library-enhancements"></span>

<!---
PR #198: Add parameter grid support in the comparison tests functionality
URL: https://github.com/validmind/validmind-library/pull/198
Labels: documentation, enhancement
--->
#### Added parameter grid support in comparison tests

We support for comparison tests using the `input_grid` parameter in `run_test` functionality. However, similar support is required for params. This feature is useful when you want to run the same test against multiple combinations of test parameters and create a single documentation block that compares the individual results.

The updated `run_test()` function allows you to pass a `param_grid`. This grid runs a test for all combinations of parameters.

Example - For this param grid:

```
param_grid = {
    "param1": [1],
    "param2": [0.1, 0.2],
}
```

A test runs once for each of the following param groups:

```
{"param1": 1, "param2": 0.1}
{"param1": 1, "param2": 0.2}
```
 
Generated PR summary: 
 
This update to the ValidMind test framework brings several enhancements and bug fixes, along with improvements to the associated Jupyter notebooks. In `quickstart_regression_full_suite.ipynb`, the `vm.init` function is modified to use `project` instead of `model`, aligning parameters with the new API structure. Additionally, in `2_run_comparison_tests.ipynb`, a new test that utilizes a `param_grid` for multiple parameter configurations has been added.

Code enhancements include updates to the `ClassifierPerformance` class, now featuring a `default_params` attribute and support for the `average` parameter in ROC AUC calculations. The `run.py` script now accommodates both parameter grids (`param_grid`) and input grids (`input_grid`) during comparison tests, enabling more flexible test configurations with various inputs and parameters. Helper functions have been introduced for validating test inputs and grid setups to enhance testing robustness.

Furthermore, unnecessary blank lines have been removed from several Python files to improve code readability. These updates aim to increase the flexibility and functionality of the ValidMind testing framework, supporting more comprehensive and varied testing scenarios.

<!---
PR #214: [SC-7262] Update RAG documentation demo notebook
URL: https://github.com/validmind/validmind-library/pull/214
Labels: enhancement
--->
#### Updated RAG Model Documentation Demo notebook

Updated RAG documentation demo notebook

- Added section on generation quality 
and included the following tests:

  - `Token_Disparity`
  - `Rouge_Score`
  - `Bleu_Score`
  - `Bert_Score`
  - `Meteor_Score`

- Added section on bias and toxicity 
and the following tests:

  - `Toxicity_Score`
  - `Regard_Score`
 
Generated PR summary: 
 
This update enhances the RAG documentation demo notebook by incorporating new tests and improvements to logging functionality. The markdown section for initializing the client library now contains detailed instructions for obtaining and using the ValidMind code snippet for model registration and connection. Additionally, the `punkt_tab` resource is downloaded to support tokenization tasks. The `.log()` method is added to several test invocations for proper result logging.

Several new tests are introduced to evaluate the quality of the RAG model's outputs. These include tests for cosine similarity distribution, token disparity between generated and reference texts, and evaluation metrics such as ROUGE, BLEU, BERT, and METEOR scores. Tests also assess potential issues like toxicity and regard scores in generated responses. Furthermore, the notebook's kernel specification is updated to use Python 3.10.

These enhancements aim to improve the robustness and comprehensiveness of the RAG model evaluation process by ensuring better alignment with reference outputs and identifying potential biases or quality issues you might encounter.

<!---
PR #213: chore: undo some testing changes
URL: https://github.com/validmind/validmind-library/pull/213
Labels: 
--->
<!-- #### Undo some testing changes -->

<!--- No external tag, was an internal infra update --->
 
<!-- Generated PR summary: 
 
This update to the CI workflow configuration includes two key improvements. The runner version is now set to `ubuntu-latest`, allowing your workflow to automatically use the most current stable version of Ubuntu. This change aids in maintaining compatibility with the latest software and security updates. Additionally, failure notifications are now enabled via a Slack webhook. This feature alerts your team in case of a failure during the integration job, enhancing your ability to promptly respond to and resolve any issues that occur in the CI process. -->


### {{< var validmind.platform >}} (v1.27.7)
<span id="platform-enhancements"></span>

<!---
PR #1012: [6413] - chore: replace all btns with chakra Button
URL: https://github.com/validmind/frontend/pull/1012
Labels: enhancement
--->
#### Updated user interface theme

- Replaced all instances of buttons with Chakra UI `Button` component for consistent styling across the application.  

- Added detailed documentation for the `Button` component in Storybook, enhancing clarity for developers and contributors.  

 
Generated PR summary: 
 
This update includes a comprehensive refactor of the UI components and styling throughout the application. You will notice that custom button components have been replaced with Chakra UI's `Button` component, and various elements now use Chakra UI's typography components for a consistent style. Unused components and storybook examples have been removed to streamline the codebase.

The styling has been enhanced with a new theme configuration featuring custom colors, fonts, and styles, including a revamped color palette for brand and neutral tones. Button styles have been updated with new variants such as `primary`, `secondary`, `tertiary`, and `ghost`, along with standardized font sizes and weights for headings and text.

Additionally, new storybook stories have been added to showcase different button variants and states, while outdated examples have been cleaned up. The code has undergone significant cleanup, with redundant CSS files removed and simpler component imports implemented.

Overall, these changes improve the maintainability and consistency of the UI components, facilitating easier future design updates and ensuring a cohesive look across the application.

<!-- MANUAL ADD:
Calculated fields: https://github.com/validmind/documentation/pull/443 -->

#### Ability to configure calculated model inventory fields


<!---
PR #1047: [6389] - feat: allow user to add description to each uploaded file
URL: https://github.com/validmind/frontend/pull/1047
Labels: enhancement
--->
#### Ability to add descriptions to attachments

- **File description support**

Users can now add descriptions to each uploaded file. This feature enhances file organization and clarity.
 
Generated PR summary: 
 
This release introduces new functionality for managing descriptions of entity attachments within the application. You can now add and remove attachment descriptions through two new API functions: `AddEntityAttachmentsDescription` and `DeleteEntityAttachmentsDescription`, which update the backend based on attachment IDs. The user interface has been enhanced by updating the `ManageAttachmentsField` component, allowing you to add and remove notes (descriptions) for attachments. This includes a new `NoteState` type to manage note states and modifications to the `FileDisplay` component, enabling you to display and edit notes. A vertical stack (`VStack`) is implemented to support the new note features, along with a menu that provides options for adding/removing notes and deleting files. Additionally, the `entity_attachments.ts` model now includes an optional `description` field in the `EntityAttachmentFile` type for storing attachment descriptions.

<!---
PR #1039: [6445] - feat: implement filtering and sorting features on historical test runs component
URL: https://github.com/validmind/frontend/pull/1039
Labels: enhancement
--->
#### Ability to filter and sort historical test runs

Filtering and sorting on historical test runs

Added the ability to filter and sort historical test runs. This improvement enhances data navigation and analysis.
 
Generated PR summary: 
 
This update brings several enhancements and bug fixes focused on API improvements and UI component updates. You can now use the new function `GetTestResultsFiltersForProject` to fetch filter options for test results. The existing API functions `GetMetricHistoryForProject` and `GetTestResultHistoryForProject` have been updated to accept additional parameters for more flexible filtering and sorting. A new type, `TFiltersResult`, is introduced to define the structure of filter results. On the UI side, the `DataTable` component has a streamlined sorting logic, while the `InputInfoModal` now supports filtering and sorting of history data with a new `TestResultsFilter` component for selecting filters. Updates to the `MetricContent` and `TestResultContent` components allow them to pass new filtering and sorting parameters to the API. Additionally, console log statements have been removed from various components, and utility functions in `utils.ts` have been refactored to include new date conversion functions and a query parameter generator. These changes enhance user experience by providing more versatile data filtering choices and improve codebase maintainability.

<!---
PR #1063: Support attaching files on workflow transitions
URL: https://github.com/validmind/frontend/pull/1063
Labels: enhancement
--->
#### Support for attaching files on workflow transitions

You can now attach files when transitioning a model's status.

https://github.com/user-attachments/assets/3cb15c2a-26dd-408e-9d77-c72cdc42c26a
 
Generated PR summary: 
 
This update brings several enhancements and new features to attachment management in the project. The `ManageAttachmentsField` component has been refactored to export types like `NoteState`, `RemoveAttachmentDetails`, and `RemoveAttachmentModalProps`, improving type management and reusability. Some components now use named exports for consistency and easier imports. A new `CustomAttachments` component is added, allowing you to manage attachments within custom fields with functionalities for file uploads, deletions, and displaying file information. This component integrates with the `InventoryModelContext`, uses `Auth0` for authentication, employs feature flag management via `useFlags`, and supports user notifications through `useToast`. 

The `FileDisplay` component has seen improvements to handle additional props and enhance user interaction, including options like opening files in a new tab and managing notes. An optional `canAddNote` prop allows conditional rendering of note-related actions. The integration of the `CustomAttachments` component into the `CustomFieldRenderer` enables its use as a custom field type, with updates made to include the new `attachments` type in the list of custom field types.

Additional improvements include enhancing the `pickProperties` utility function for better type safety, removing unnecessary loading states in the `WorkflowStatusFormModal`, and improving sorting logic in the `FieldForm` to sort available fields by title. These changes are designed to enhance flexibility and usability, providing a more robust and user-friendly experience in managing attachments within the application.



<!---
PR #1045: As a validator, I want to be able to tag a Documentation section as evidence in my validation report
URL: https://github.com/validmind/frontend/pull/1045
Labels: enhancement
--->
#### Ability to tag documentation sections as evidence

You want to tag a documentation section as evidence in your validation report

As a validator

You can now tag a documentation section as evidence in your validation report.

See this demo video for more details: https://validmind.slack.com/archives/C031JU5P8G1/p1729716886170779?thread_ts=1729285495.301129&cid=C031JU5P8G1
 
Generated PR summary: 
 
This update enhances evidence management, UI elements, and code structure. You can now use new functions for linking and deleting evidence, benefiting from an improved `RiskAssessmentAddEvidenceModal2` that streamlines evidence selection. Changes to evidence-related components cater to handling new types and improve interaction. The UI sees improvements with consistent styling across components by utilizing Chakra UI variants and sizes, alongside a `DangerMenuItem` for actions requiring caution. Layouts, modals, buttons, and other elements have been refined for a better user experience. Code refactoring enhances modularity with updates to `ContentRow` components and the `useTestResult` hook. Utility functions are also improved for section link generation. New dependencies such as `react-reflex`, `lodash.throttle`, and `react-measure` are included to bolster feature support and performance. These enhancements aim to elevate the application's usability in managing evidence and consistency in its interface design.

<!---
PR #1078: Support for datetime manipulation in inventory fields
URL: https://github.com/validmind/frontend/pull/1078
Labels: enhancement
--->

<!-- SPOKE WITH ANDRES, THIS IS NOT READY TO BE EXPOSED YET  -->

<!-- #### Support for `datetime` manipulation in inventory fields

You can now use the following date/date-time-related functions in calculated fields:

- time
- date
- datetime
- `timedelta`
- `relativedelta`

Example formula using `date` and `relativedelta`:

```python
def formula(params):
    """ 
    Calculate the next review date based on the approval date and review frequency.

    Args:
        params.dmApprovedDate (str): The approval date in YYYY-MM-DD format.
        params.dmRiskTier (string): The review tier (Tier 1, Tier 2, or Tier 3).

    Returns:
        datetime: The next review date.
    """
    
    # Guard against empty dates
    if params.dmApprovedDate == "":
        return "N/A"
    
    # Convert the approved_date string to a datetime object
    approved_date = date.fromtimestamp((int(params.dmApprovedDate) or 0) / 1000)
    
    # Define the review frequency mapping
    review_frequency = {
        "Tier 1": relativedelta(months=3),  # Quarterly
        "Tier 2": relativedelta(months=6),  # Semi-annually
        "Tier 3": relativedelta(years=1)   # Annually
    }
    
    # Get the appropriate timedelta based on the tier
    frequency = review_frequency.get(params.dmRiskTier)
    
    if not frequency:
        return "N/A"
    
    # Calculate the next review date
    next_review_date = approved_date + frequency
    
    return next_review_date.isoformat()
```

To recap

Here are all the objects available in the restricted calculation code environment:

| **Function/Global**     | **Description**                                                                                       | **Example Usage**              |
|-------------------------|-------------------------------------------------------------------------------------------------------|--------------------------------|
| `hasattr`               | Checks if an object has a specific attribute.                                                         | `hasattr(obj, 'attr_name')`     |
| `getattr`               | Retrieves the value of a specified attribute from an object.                                         | `getattr(obj, 'attr_name', default)` |
| `datetime`              | Provides classes for working with dates and times.                                                   | `datetime.now()`                |
| `timedelta`             | Represents a duration, the difference between two dates or times.                                   | `datetime.now() + timedelta(days=1)` |
| `relativedelta`         | Provides more powerful date manipulations, like months or leap years handling.                      | `datetime.now() + relativedelta(months=1)` |
| time                    | Provides functions to work with time, such as sleep and measuring time intervals.                  | `time.sleep(1)`                 |
| None                    | Represents absence of a value.                                                                       | x = None                        |
| False                   | Boolean value representing false.                                                                  | is_valid = False                |
| True                    | Boolean value representing true.                                                                   | is_valid = True                 |
| abs                     | Returns absolute value of a number.                                                                | abs(-10)                        |
| bool                    | Converts a value to Boolean.                                                                      | bool(1)                         |
| float                   | Converts a value to floating-point number.                                                        | float('3.14')                   |
...
 
Generated PR summary: 
 
This update enhances date handling by updating the `CustomDatePicker` component to use `dayjs` for improved reliability and consistency over the native `Date` object. Additionally, the `useField` hook now utilizes the `useEffect` hook to initialize state values, ensuring that the `value` state accurately reflects changes to the `defaultState` prop. These improvements aim to boost the functionality and reliability of these components. -->

<!---
PR #1025: Updagrade ckeditor 43
URL: https://github.com/validmind/frontend/pull/1025
Labels: 
--->

<!-- ### Upgrade ckeditor 43 -->
<!-- There were no notes or an `internal` tag added for this release. -->

<!---
PR #989: AI Terms of Use
URL: https://github.com/validmind/frontend/pull/989
Labels: documentation
--->
#### Accepting AI terms of use

Added accept terms of AI use during account registration. Existing users see the dialog popup next time they log in.
 
Generated PR summary: 
 
This update introduces a new feature that requires you to accept the AI Terms of Use before continuing to use the application. A new component, `AITermsOfUseAlert`, prompts you to review and accept these terms through a checkbox and submit button. Additionally, there is a new API method, `PutUserAcceptTerms`, for updating your acceptance status. The `CreateOrganization` API now includes a field for indicating acceptance of AI terms. Your user profile is updated with an `accepted_ai_terms` field in the user model. The onboarding process now has a checkbox for accepting the AI Terms of Use. Custom styles are applied to match the application's design, including those for alert and checkbox elements. Lastly, a constant `AITermsOfUseUrl` provides access to the AI Terms of Use link. This feature ensures that you are informed about and explicitly accept the AI Terms before proceeding with the application.

## Bug fixes

<!---
PR #1018: [SC-6833] calculating last updated for template based on last version
URL: https://github.com/validmind/frontend/pull/1018
Labels: bug
--->
### Calculating last updated for template based on last version

N/A
 
Generated PR summary: 
 
This update improves the `UserRoleTable` and `Templates` components. In the `UserRoleTable`, the logic for displaying user roles is simplified by removing a redundant conditional check, as roles are already filtered by organization through the `getUserRolesForOrg` function. The rendering of the `RolePill` component is also streamlined for better readability and maintainability. In the `Templates` component, the "Last Updated" column now shows the creation date of the most recent version when available. This provides more accurate information about template updates, enhancing your user experience.

<!---
PR #1037: user roles not updated
URL: https://github.com/validmind/frontend/pull/1037
Labels: bug
--->
### User roles not updated

N/A

<!---
PR #1054: [6981] - fix: solve UI bug on Assign roles modal
URL: https://github.com/validmind/frontend/pull/1054
Labels: bug
--->
### fix: solve UI bug on assign roles modal

Fix UI display when multiple user roles are selected  
(see screenshot)  

![image](https://github.com/user-attachments/assets/fcc97215-c350-4839-b906-d4e3319f2dd7)
 
Generated PR summary: 
 
This release enhances the `AddUserRolesModal` component by improving how role pills are displayed in the web application. The update involves replacing the `HStack` component with the `Wrap` component from Chakra UI, allowing for better handling of roles when there is limited space, resulting in a more responsive and flexible user interface. Specifically, in `RolesPicker.tsx`, the `HStack` now includes `flexWrap={"wrap"}` to enable this functionality. Similarly, in `index.tsx`, the use of `Wrap` ensures a more adaptable layout for displaying selected roles. Additionally, minor formatting adjustments have been made to improve code readability. These changes are intended to enhance your user experience by ensuring role pills display effectively even if they exceed available horizontal space.

### Removed model documentation workflows


## Documentation

<!-- BECK IS MANUALLY ADDING NEAT THINGS WE NEVER HIGHLIGHTED OR BACKFILLED AS A DOCS LINK IN ANOTHER RELEASE -->

### User guide updates
<span id="guide-updates"></span>

We've been working hard to keep our documentation up to date with our lightning-fast feature releases. Below is a round-up of some notable user guide improvements not covered by independent feature release announcements:

#### Configuration

##### Register with {{< var vm.product >}}

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
Signing up for {{< var vm.product >}} is free — and now you can follow our step-by-step registration guide to get you started.

:::

::: {.w-30-ns .tc}
[Register with {{< var vm.product >}}](/guide/configuration/register-with-validmind.qmd){.button}

:::

::::

<!-- User registration:
https://github.com/validmind/documentation/pull/410 -->

##### Managing your organization

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
After you sign up for {{< var vm.product >}}, refer to our guides on setting up your organization, including options for establishing a private connection between {{< var vm.product >}} and your company network.

:::

::: {.w-30-ns .tc}
[Managing your organization](/guide/configuration/managing-your-organization.qmd){.button}

:::

::::

<!-- Configuration — Organization & Users:
https://github.com/validmind/documentation/pull/226
https://github.com/validmind/documentation/pull/235
https://github.com/validmind/documentation/pull/285 -->

##### Managing users

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
We've clarified prerequisites for tasks and the permissions default roles have and improved our information on user management to help you understand how access to {{< var vm.product >}} works.

:::

::: {.w-30-ns .tc}
[Managing users](/guide/configuration/managing-users.qmd){.button}

:::

::::

![Example prerequisite information](example-prereq.png){fig-alt="Screenshot of some example prerequisite information" .screenshot width=90%}

<!-- Updated permissions:
https://github.com/validmind/documentation/pull/273 -->


#### Model workflows

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
We continue to add new functionality to model workflows within the {{< var validmind.platform >}}, including the ability to select a **User Role** or **User Type** inventory fields in Approval steps, and the ability to configure diverging paths in Condition Branch steps.
:::

::: {.w-30-ns .tc}
[Approval steps](/guide/model-workflows/set-up-model-workflows.qmd#approval){.button}

[Condition Branch steps](/guide/model-workflows/set-up-model-workflows.qmd#condition-branch){.button}

:::

::::

![Example Condition Branch where GenAI models require special approval from the User group Legal Team](/guide/model-workflows/example-condition-branch.png){fig-alt="A screenshot showing an example Condition Branch where GenAI models require special approval from the User group Legal Team" .screenshot width=90%}

<!-- Updated workflows docs:
Approval step update: https://github.com/validmind/documentation/pull/264 
Condition branches: https://github.com/validmind/documentation/pull/484  -->

#### Model inventory

##### Register models in the inventory

<!-- Updated 2-step model registration:
https://github.com/validmind/documentation/pull/253 -->

##### View model activity

<!-- Documentation activity > Model activity:
https://github.com/validmind/documentation/pull/315 
https://github.com/validmind/documentation/pull/358 -->

#### Model documentation

##### Working with documentation templates

<!-- Updated docs for templates:
https://github.com/validmind/documentation/pull/228
https://github.com/validmind/documentation/pull/230 -->

##### Work with content blocks

<!-- Inserting math formulas:
https://github.com/validmind/documentation/pull/204 -->

<!-- Revamped Work with content blocks:
https://github.com/validmind/documentation/pull/390 -->


#### Model validation

##### Working with model findings

<!-- Revamped model findings docs:
https://github.com/validmind/documentation/pull/352 
https://github.com/validmind/documentation/pull/355 -->

#### Reporting

<!-- Revamped view reports:
https://github.com/validmind/documentation/pull/409 -->

#### {{< fa cube >}} Developers

##### Documenting models

<!-- Revamp of "Developer > Generate model documentation":
https://github.com/validmind/documentation/pull/277 -->

##### Upgrading {{< var vm.product >}}

<!-- Upgrading VM instructions:
https://github.com/validmind/documentation/pull/490 -->

#### Feature renaming

<!-- Resource statuses > model lifecycle statuses:**
https://github.com/validmind/documentation/pull/278 -->

resource statuses > model lifecycle statuses
: We previously referred to model lifecycle statuses as "resource statuses."

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
Model lifecycle statuses have been renamed in the {{< var validmind.platform >}} and documentation updated to reflect this shift. 

:::

::: {.w-40-ns .tr}
[Customize model lifecycle statuses](/guide/model-workflows/customize-model-lifecycle-statuses.qmd){.button}

:::

::::


<!-- Custom fields > model inventory fields:**
https://github.com/validmind/documentation/pull/279 -->

custom fields > model inventory fields
: We previously referred to model inventory fields as "custom fields." 

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
Custom fields have been renamed in the {{< var validmind.platform >}} and documentation updated to reflect this change. 

:::

::: {.w-40-ns .tr}
[Manage model inventory fields](/guide/model-inventory/manage-model-inventory-fields.qmd){.button}

:::

::::


### {{< var validmind.training >}} updates
<span id="training-updates"></span>

<!---
PR #488: Rework training section & update validator training
URL: https://github.com/validmind/documentation/pull/488
Labels: documentation
--->

#### Updated validator training

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
- We expanded our validator training and along with that, our validator user guides. 
- Now they both include more guidance for tracking and resolving issues identified in model findings. 

:::

::: {.w-30-ns}
[Track issue resolution](/guide/model-validation/add-manage-model-findings.qmd#track-issue-resolution){.button}

:::

::::

::: {.column-margin}
::: {.preview source="/training/validator-fundamentals/validator-fundamentals.qmd"}
:::
:::


### Site enhancements

#### Mobile responsive redesign

<!-- Mobile responsive grid:
https://github.com/validmind/documentation/pull/225
https://github.com/validmind/documentation/pull/252 -->

- Previously, we made use of an outdated format of rendering columns that resulted in some of our documentation pages displaying poorly on mobile-width screens.
- We've now reimplemented these pages — including our index landing page — to be mobile responsive:

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns .tc}
![Old documentation site in mobile view](old-site-mobile.gif){fig-alt="An animated gif showing the old documentation site in mobile view" .screenshot width=70%}

:::

::: {.w-40-ns .tc}
![New documentation site in mobile view](new-site-mobile.gif){fig-alt="An animated gif showing the new documentation site in mobile view" .screenshot width=70%}

:::

::::

#### Style and accuracy edits

<!-- Style & accuracy audits:
About: https://github.com/validmind/documentation/pull/478
Get Started: https://github.com/validmind/documentation/pull/469
Guides: https://github.com/validmind/documentation/pull/377 -->

##### Improved inline link styling

<!-- Footnotes:
https://github.com/validmind/documentation/pull/222
https://github.com/validmind/documentation/pull/244 -->

- Previously, we employed heavy use of inline links in instructional text that took the reader prematurely out of the context. 
- Now, we use of footnotes to indicate supplemental information, providing a cleaner and easier to follow experience:

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns .tc}
![Old instructional inline links](/about/contributing/style-guide/inline-links_incorrect.png){fig-alt="A screenshot of the old instructional inline links" .screenshot}

:::

::: {.w-40-ns .tc}
![New instructional supplementary footnote links](/about/contributing/style-guide/margin-footnotes_correct.png){fig-alt="A screenshot of the new instructional supplementary footnote links" .screenshot}

:::

::::

##### Enlargable lightbox-style images

<!-- Lightbox images:
https://github.com/validmind/documentation/pull/517 -->

- Previously, we embedded detailed images in our user guides without providing the ability to enlarge them. 
- Now, images that appear small within the user guides can be clicked on to expand them for ease of readability:

![Click to expand a screenshot of {{< var vm.product >}}'s main dashboard](/guide/configuration/main-dashboard.png){fig-alt="Screenshot of the main ValidMind dashboard" .screenshot width=90%}

#### Authoring enhancements

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
Did you know that along with the {{< var validmind.developer >}}, the code for our documentation site is also open-source?

:::

::: {.w-30-ns .tc}
[{{< fa brands github >}} documentation](https://github.com/validmind/documentation){.button}

:::

::::

Below are some improvements we've made to our authoring tools to streamline the process for contributors: 

##### Variables and single-sourcing

<!-- Variables:
https://github.com/validmind/documentation/pull/245
https://github.com/validmind/documentation/pull/263 -->

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}

- Renaming our product offerings was a breeze thanks to our established variable infrastructure:

:::

::: {.w-30-ns .tc}

[Product names](/about/contributing/style-guide/conventions.qmd#product-names){.button}


:::

::::

![{{< var vm.product >}}'s rendered product variables](rendered-product-variables.png){fig-alt="Screenshot of ValidMind's rendered product variables" .screenshot width=90%}

- When possible, we prefer to single-source our content to reduce content silos and to make updating content efficient. For example, the instructions on {{< fa arrow-up-from-bracket >}} How to upgrade at the bottom of every release is simply a single-sourced file!* (FOOTNOTE)  


##### Style guide for training materials

<!-- Training style guide:
https://github.com/validmind/documentation/pull/363 -->

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}

To support the release of {{< var validmind.training >}}, we've included a section in our style guide to cover guidelines unique to our training materials.

:::

::: {.w-30-ns .tc}

[Training materials](/about/contributing/style-guide/conventions.qmd#training-materials){.button}


:::

::::


##### New `.button` and `.video` CSS classes

<!-- CSS:
Buttons & video class: https://github.com/validmind/documentation/pull/486
Screnshots: https://github.com/validmind/documentation/pull/420 -->

- Previously, we used outdated HTML to render button links and embed videos.
- We've now implemented simplified but powerful CSS classes to replace many unwieldy lines of code:

:::: {.flex .flex-wrap .justify-around}

::: {.w-20-ns .tc}
[Buttons](/about/contributing/style-guide/conventions.qmd#buttons){.button}

:::

::: {.w-20-ns .tc}
[Videos](/about/contributing/style-guide/conventions.qmd#videos){.button}

:::

::::

#### 404 page

<!-- 404 page:
https://github.com/validmind/documentation/pull/231 -->

:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns}
Previously, visiting a non-existing page within the documentation would present you with a poor user experience in the form of a default XML error. 

We've now introduced a custom 404 page where you can perform a search instead. 

:::

::: {.w-50-ns}
::: {.preview source="/404.qmd" offset="70" height="300"}
:::
:::

::::

{{< include /releases/_how-to-upgrade.qmd >}}


<!-- FOOTNOTES -->

[^1]: [{{< var validmind.developer >}} enhancements](#library-enhancements)

[^2]: [{{< var validmind.platform >}} enhancements](#platform-enhancements)

[^3]: [User guide updates](#guide-updates)

[^4]: [{{< var vm.product >}} website](https://validmind.ai/){target="_blank"}

[^5]: [New {{< var vm.product >}} branding](#new-branding)

[^6]: [{{< var validmind.training >}} updates](#training-updates)



