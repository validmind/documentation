---
title: "December 19, 2024"
---

SUMMARY HERE

::: {.highlights}

## {{< fa bullhorn >}} Release highlights

### {{< var validmind.developer >}} (v2.6.7)

<!---
PR #243: [SC 7521] Move capital markets notebooks from code sharing to code samples
URL: https://github.com/validmind/validmind-library/pull/243
Labels: documentation, highlight
--->
#### Jupyter Notebooks for capital markets

NTS UPDATE ON NOTEBOOKS LISTING AS WELL
 
Generated PR summary: 
 
This update includes several improvements to Jupyter notebooks and Python modules related to option pricing models and JSON encoding. In the notebooks, the 'Data Preparation' section has been removed from `quickstart_option_pricing_models.ipynb`, a typo in the benchmark test description has been corrected, code cell execution counts have been adjusted, and data access methods for plotting have been updated. Additionally, redundant comments have been removed, and code formatting has been enhanced. Two notebooks focusing on option pricing models and sensitivity analysis have also been deleted. In the Python modules, metadata key formatting in `validmind/tests/comparison.py` has been streamlined by removing "Input:" and "Param:" prefixes. The `NumpyEncoder` class in `validmind/utils.py` has been refactored for better readability and maintainability by adding type handler methods for handling various data types efficiently. These changes enhance the clarity, maintainability, and functionality of the codebase, particularly concerning option pricing models and JSON data management.

### {{< var validmind.platform >}} (v1.27.17)


<!---
PR #1079: Added the ability to Managed Saved Views
URL: https://github.com/validmind/frontend/pull/1079
Labels: enhancement
--->
#### Added the ability to manage saved views

New feature allows you to save filters, sorting, and columns as predefined views for model inventory and findings.
 
Generated PR summary: 
 
This update introduces a feature for managing saved views within the application. You can now utilize new API functions to handle saved views, including fetching them by type, creating new ones, updating existing ones, and deleting undesired views. A new UI component called `ManageViewsButton` allows you to manage your saved views easily. This includes adding or editing views via a modal dialog, deleting them with confirmation, and displaying a list for selection. The `ManageViewsButton` is integrated into the `ModelFindings` and `ModelInventory` pages so you can save and manage views related to findings and models. Additionally, a feature flag named `modelInventorySavedViews` has been introduced to enable or disable this functionality as needed. A model called `TSavedView` is also defined to represent a saved view's properties such as unique identifier, name, description, type, and content.

### Documentation

<!---
PR #544: Add login button to docs site
URL: https://github.com/validmind/documentation/pull/544
Labels: documentation
--->

<!-- https://github.com/validmind/documentation/pull/580 -->

#### Log In button

<!-- MANUAL ADD
https://github.com/validmind/documentation/pull/558 -->

#### New FAQs

<!-- MANUAL ADD
https://github.com/validmind/documentation/pull/582 -->

#### ValidMind Help Center 

:::

## Enhancements

### {{< var validmind.platform >}} (v1.27.17)

<!---
PR #1100: Mnt analytics improvements
URL: https://github.com/validmind/frontend/pull/1100
Labels: enhancement
--->
### Mnt analytics improvements

Changes to analytics

- Added sorting capability for bar charts.

- Added a new action for metrics, count %. This feature lets you count the percentage of a given metric.
 
Generated PR summary: 
 
The latest update to the web application's `AddOrEditVisualizationModal` component brings several enhancements aimed at improving your data visualization experience. You can now sort visualizations using the newly added `SortingComponent`, which allows sorting based on selected metrics or groupings. This feature dynamically generates sorting options with the use of the `useMemo` hook, tailored to your current dataset, metrics, and grouping preferences. Additionally, the `MetricSelector` includes a new 'Count %' option across different metric types (string, number, date, boolean), enabling you to view metrics as percentages. To further enhance usability, minor UI adjustments have been implemented; specifically, the `ModalBody` overflow property has been changed to `hidden`, and a vertical scroll feature has been added to the `VStack`. These improvements provide you with greater flexibility in viewing and interacting with your data within the application.

<!---
PR #1076: [7333] - chore: add UI changes for revision history
URL: https://github.com/validmind/frontend/pull/1076
Labels: enhancement
--->
### Add UI changes for revision history

Implemented UI enhancements for the revision history feature
 
Generated PR summary: 
 
This update introduces the `RevisionHistoryButtonPlugin` to enhance your CKEditor experience. With this new plugin, you can easily navigate revision history through a conveniently added button in the editor's UI. The plugin initializes when the editor is ready and seamlessly integrates with existing UI elements like the toolbar and sticky panel.

Additionally, extensive CSS modifications improve dark mode styling for CKEditor and related components. These changes ensure that UI elements such as toolbars, buttons, and revision history sidebars are visually consistent and accessible in dark mode by adjusting background colors, text colors, borders, and other styling properties to align with the dark theme.

<!---
PR #1092: [SC-7471] adding custom field permission check
URL: https://github.com/validmind/frontend/pull/1092
Labels: enhancement
--->
### Adding custom field permission check

Administrators can now assign write permissions to individual fields in the model inventory.
 
Generated PR summary: 
 
This update enhances the management of custom field permissions within the application. You will notice a refactoring of permission types, as the `TPermissionAction` type is replaced with a generic `string[]` type across components and contexts, simplifying permission handling logic.

The Custom Field Modal now includes new states and logic to manage role changes, allowing you to add or remove roles with specific permissions. A new hook, `useCustomFieldPermissions`, is introduced for fetching and managing role permissions on custom fields. The `onSaveClicked` function is updated to handle role permission updates asynchronously, providing feedback via toast notifications.

User interface improvements include integrating `chakra-react-select` for an enhanced multi-select experience when managing roles in the Custom Field Modal. The Custom Fields page now handles modal state more effectively, using a single instance for editing and adding new fields.

Context and hook updates involve changes to `InventoryModelContext` and `UsersContext` to utilize the new permission type. Additionally, a utility function `isReadOnlyField` is added in `InventoryModelOverview` to determine field editability based on permissions.

These enhancements aim to improve the flexibility and usability of custom field management regarding role-based permissions.

## Bug fixes

<!---
PR #1106: Deleting a finding should remove it from a validation report
URL: https://github.com/validmind/frontend/pull/1106
Labels: bug
--->
### Deleting a finding when you remove a validation report

Fixed an issue where users could delete findings even if they were assigned to a validation report.
 
Generated PR summary: 
 
This update introduces several key enhancements to the web application. The API module now includes a new function, `GetFindingLinkedAssessmentFindings`, which retrieves linked assessment findings for any given finding. This addition allows you to easily fetch and display related assessments when viewing or deleting a finding. The `AssessmentFinding` and `Assessment` types in the `guideline.ts` model have been updated to include optional fields for `assessment` and `inventory_model`, thereby associating more detailed information with each finding and assessment. 

On the user interface side, the `ViewFinding` component now provides a warning alert when you attempt to delete a finding linked to one or more assessments. This alert outlines which assessments will be affected, offering clarity on the consequences of your actions. Additionally, the `ConfirmationAlert` component's `dialogBody` prop now accepts `ReactNode`, enabling more complex and informative dialog content.

Overall, these improvements enhance your experience by providing better context and warnings during potentially impactful actions like deleting findings, ensuring you are fully informed about how linked assessments could be impacted.

## Documentation

<!-- MANUAL ADD
https://github.com/validmind/documentation/pull/580 -->

### Simplified homepage and training portal

DESC HERE

### Developer Fundamentals

<!---
PR #543: Add developer fundamentals videos & training fixes
URL: https://github.com/validmind/documentation/pull/543
Labels: documentation
--->
#### Add developer fundamentals videos & training fixes

we created a series of 10 short videos 

We created a series of 10 short videos to help you learn about the model documentation process as a developer. These videos introduce you to generating model documentation that includes tests. You will also learn about adding your own tests, editing the content online, and then submitting your documentation for approval so that a validator can review your submitted documentation.

{{ < video https://www.youtube.com/embed/videoseries?si=aP7yLOGO60h4vi8C&amp;list=PL7I7ZrCoVCCP876aLRCjitZqYif96Whlz title=Developer Fundamentals > }}
 
Generated PR summary: 
 
This update to the ValidMind project includes several key enhancements and updates. The template for training modules has been revised, changing "Documenting Models 101" to "Developer Fundamentals" and "Validating Models 101" to "Train a model." In addition, three new SVG files in specific colors have been added to the assets directory. The guides section now features a new video series called 'Developer Fundamentals' with ten videos, and a card title is included for the 'Validating Models 101' series. Updates have been made to the tutorials notebook, replacing mentions of the "ValidMind Developer Framework" with "ValidMind Library," affecting sections related to initialization and documentation. Training module adjustments aim to refine section references and boost interactivity in the documentation process. Finally, a new JSON file tracks the status of test runs, confirming that all tests are passing successfully.

<!---
PR #552: Updated workflows/actions to dynamically generate an `.env` file
URL: https://github.com/validmind/documentation/pull/552
Labels: documentation
--->

<!-- https://github.com/validmind/documentation/pull/567 -->

#### Developer Fundamentals example executed Jupyter Notebook

ValidMind Academy

- The ValidMind Academy developer fundamentals course has been updated with an improved version of the ValidMind introduction for model developers Jupyter Notebook.

- You can now execute this embedded notebook live within the training. This allows you to interact with output cells previously omitted, such as when previewing the documentation template.

- This training notebook serves as a reference guide. You will understand what to expect when you first run the cells.

Jupyter Notebooks

- We've included details on how to initialize ValidMind with credentials stored in an `.env` file in our Jupyter Notebook samples.

- Our documentation guides have also been updated to match this new experience.
 
Generated PR summary: 
 
This update introduces enhancements to the environment configuration and execution of Jupyter Notebooks within the project. You will find updates to the `.env.example` file, which now includes new environment variables: `VM_API_HOST`, `VM_API_KEY`, `VM_API_SECRET`, and `VM_API_MODEL`. GitHub Actions workflows (`demo-notebook`, `prod-notebook`, `staging-notebook`) have been modified to require an `env_file` input, ensuring that the `.env` file is present before running notebooks. Additionally, workflow files (`deploy-docs-prod.yaml`, `deploy-docs-staging.yaml`, `validate-docs-site.yaml`) are updated to create a `.env` file dynamically using secrets prior to notebook execution.

A new `execute` target in the `Makefile` facilitates running Jupyter Notebooks with specified profiles and file paths, and notebooks are now duplicated for execution rather than checked out from the main branch.

Documentation has been enhanced in `store-credentials-in-env-file.qmd` with detailed instructions on storing model credentials in `.env` files for use in notebooks. Examples and explanations for enabling monitoring with these files are added in `enable-monitoring.qmd`. These changes aim to improve the flexibility and security of environment management while streamlining notebook execution and monitoring processes.

{{< include /releases/_how-to-upgrade.qmd >}}


<!-- FOOTNOTES -->