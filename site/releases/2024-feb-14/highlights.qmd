---
title: "February 14, 2024"
lightbox: true
filters:
  - tachyons
---

## Release highlights

We've improved the ValidMind user experience, from more supportive documentation templates, easier specification of inputs, and better filtering within the {{< var vm.developer >}}, to the ability to view which user ran actions within the {{< var vm.platform >}}.

### {{< var validmind.developer >}} (v1.26.6)

<!---[SC-2706] Documentation templates should allow rendering more than one unique test result for the same test by @AnilSorathiya in [#322](https://github.com/validmind/developer-framework/pull/322)--->
#### Support for tracking each test result with a unique identifier

:::: {.flex .flex-wrap .justify-around}

::: {.w-50-ns}
Documentation templates have been updated to support logging each test run as a unique result, making it possible to run the same test across different datasets or models. 

:::

::: {.w-50-ns .tc}
[Document multiple results for the same test](/notebooks/how_to/document_multiple_results_for_the_same_test.ipynb){.button}

:::

::::

To make use of this new feature, you simply add a unique `result_id` identifier as a suffix to a `content_id` identifier in the content block definition of a `metric` or `test` content type. 

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns}

For example, the following content blocks with the suffixes `training_data` and `test_data` enable you to log two individual results for the same test `validmind.data_validation.Skewness`:

```yaml
- content_type: test
  content_id: validmind.data_validation.Skewness:training_data
- content_type: metric
  content_id: validmind.data_validation.Skewness:test_data
```
:::

::: {.w-50-ns}

You can configure each of these unique `content_id` identifiers by passing the appropriate `config` and `inputs` in `run_documentation_tests()` or `run_test()`. For example, to configure two separate tests for `Skewness` using different datasets and parameters:

```python
test = vm.tests.run_test(
    test_id="validmind.data_validation.Skewness:training_data",
    params={
        "max_threshold": 1
    },
    dataset=vm_train_ds,
)
test.log()

test = vm.tests.run_test(
    test_id="validmind.data_validation.Skewness:test_data",
    params={
        "max_threshold": 1.5
    },
    dataset=vm_test_ds
)
test.log()
```

:::

::::


<!---[SC 3073] `run_documentation_tests()` should allow specifying inputs for any test individually by @AnilSorathiya in [#327](https://github.com/validmind/developer-framework/pull/327)--->
#### Easier specification of inputs for individual tests

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns}

The `run_documentation_tests()` function has been updated to allow passing both test `inputs` and `params` via the `config` parameter.

Previously, `config` could already pass `params` to each test that you declare. In this example, the test `SomeTest` receives a custom value for the param `min_threshold`:

```python
full_suite = vm.run_documentation_tests(
    inputs = {
        ...
    },
    config={
        "validmind.data_validation.SomeTest": {
            "min_threshold": 1
        }
    }
)
```
::: {.tc}
[run_documentation_tests()](/validmind/validmind.html#run_documentation_tests){.button target="_blank"}
:::

:::

::: {.w-50-ns}

With the updated function, `config` can now pass both `params` and `inputs` to each declared test. For example, to specify what model should be passed to each individual test instance:

```python
full_suite = vm.run_documentation_tests(
    inputs = {
        "dataset": vm_dataset,
        "model": xgb_model
    },
    config = {
        "validmind..model_validation.Accuracy:xgb_model": {
            "params": { threshold: 0.5 },
            "inputs": { "model": xgb_model }
        },
        "validmind..model_validation.Accuracy:lr_model": {
            "params": { threshold: 0.3 },
            "inputs": { "model": lr_model }
        },
    }
)
```

Here, the top-level `inputs` parameter acts as a global `inputs` parameter, and the individual tests can customize what they see as the input model via their own `config` parameters.

:::

::::


<!---[SC-2330] Ability to see available task types and tags by @juanmleng in [#317](https://github.com/validmind/developer-framework/pull/317)--->
#### View available task types and tags to filter tests

To enable model developers to know what task types and tags are available to filter on, we have made some updates to our {{< var vm.developer >}}:

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
- New `list_task_types()` and `list_tags()` endpoints enable you to list all available `task_type` and `tags` across all test classes
- New `list_tasks_and_tags()` endpoint enables you to list which `tags` are associated to which `task_type`

:::

::: {.w-30-ns .tc}
[Explore tests](/notebooks/how_to/explore_tests.ipynb){.button}

:::

::::

<!-- Using the variable in alt text messes up the image display  -->

![Explore tests notebook with the Understanding Tags and Task Types code cells run successfully](list-tasks-and-tags.png){width=80% fig-alt="Screenshot showing the Explore tests notebook with the Understanding Tags and Task Types code cells run successfully" width=90% .screenshot}

<!---John6797/sc 2943/developer framework should register documentation by @johnwalz97 in [#324](https://github.com/validmind/developer-framework/pull/324)--->
#### Developer framework documentation inputs tracking

:::: {.flex .flex-wrap .justify-around}

::: {.w-75-ns}
- We have added a new feature that tracks which datasets and models are used when running tests. Now, when you initialize datasets or models with `vm.init_dataset()` and `vm.init_model()`, we link those inputs with the test results they generate. 
- This makes it clear which inputs were used for each result, improving transparency and making it easier to understand test outcomes. This update does not require any changes to your code and works with existing `init` methods.

:::

::: {.w-25-ns .tc}

[init_dataset()](/validmind/validmind.html#init_dataset){.button target="_blank"}

[init_model()](/validmind/validmind.html#init_model){.button target="_blank"} 

:::

::::



### {{< var validmind.platform >}} (v1.13.13)

<!---Update events to show users who ran the developer framework actions by @cachafla in [#532](https://github.com/validmind/frontend/pull/532)--->
#### Updated events to show users

<!-- NOT A PRODUCT NAME IN THIS CASE, JUST A REFERENCE IN THE UI -->

We now display the name of the user who ran the action instead of a generic "Developer Framework" name whenever you generate documentation:

:::: {.flex .flex-wrap .justify-around}

::: {.w-40-ns}

##### Before

<!-- Using the variable in alt text messes up the image display  -->

![Old indicator defaulting to the developer framework logging an event](actions-before.png){fig-alt="Screenshot of the old indicator defaulting to the developer framework logging an event" .screenshot}

:::

::: {.w-40-ns}

##### After

<!-- Using the variable in alt text messes up the image display  -->

![New indicator specifying the user who made updates via the developer framework](actions-after.png){fig-alt="Screenshot of the new indicator specifying the user who made updates via the developer framework" .screenshot}

:::

::::

<!---Nrichers/sc 2163/revisit once again the getting started page by @nrichers in [#543](https://github.com/validmind/frontend/pull/543)--->
#### Simplified instructions for developers

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
We simplified the instructions for getting started with the {{< var validmind.developer >}} in the {{< var validmind.platform >}}. 

:::

::: {.w-40-ns}

[Install and initalize the client library](/developer/model-documentation/install-and-initialize-client-library.qmd){.button}

:::

::::

These instructions tell you how to use the code snippet for your model documentation with your own model or with one of our code samples:

![Getting Started page for a model with the custom code snippet](getting-started-instructions.png){width=80% fig-alt="Screenshot of the Getting Started page for a model with the custom code snippet" .screenshot}


## Enhancements

<!---Panchicore/sc 2799/model owner should be able to edit model by @panchicore in [#562](https://github.com/validmind/frontend/pull/562)--->
#### Ability to edit model fields

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
- You can now edit the values for default fields displayed on the model details page. 
- Previously it was only possible to edit inventory fields defined by your organization.
:::

::: {.w-30-ns}

[Edit model inventory fields](/guide/model-inventory/edit-model-inventory-fields.qmd){.button}

:::

::::


<!---Reducing load time by using localstorage for Auth0 by @even-steven in [#570](https://github.com/validmind/frontend/pull/570)--->
#### Performance improvements for the {{< var validmind.platform >}}
We made improvements to page load times on our {{< var vm.platform >}} for a smoother user experience.

<!---Added support for filtering model inventory by developers / validators by @even-steven in [#563](https://github.com/validmind/frontend/pull/563)--->
#### Filter the Model Inventory 
:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
You can now narrow down models in your **Model Inventory** with our advanced filter, search, and sort options. 
:::

::: {.w-30-ns .tc}
[Search, filter, and sort models](/guide/model-inventory/working-with-model-inventory.qmd#search-filter-and-sort-models){.button}

:::

::::

<!---Support for custom model fields by @panchicore in [#509](https://github.com/validmind/frontend/pull/509)--->
#### Custom model inventory fields
:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
- The model inventory has been updated to allow organizations to add additional fields. 
- This enhancement enables administrators to customize the model inventory data schema according to your specific organizational needs. 
:::

::: {.w-40-ns .tc}
[Manage model inventory fields](/guide/model-inventory/manage-model-inventory-fields.qmd){.button}

:::

::::

<!---Adds toggle to see only mentions in Recent Activity > Comments by @gtagle in [#525](https://github.com/validmind/frontend/pull/525)--->
#### User mentions in comments

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
We implemented a toggle feature in the **Model Activity** and Recent Activity sections under **Comments** to filter and display only specific user mentions. 
:::

::: {.w-30-ns}

[View model activity](/guide/model-inventory/view-model-activity.qmd){.button}

:::

::::

<!---Add CKEditor support to finding description and remediation plan - Introduce the `RichTextContentEditor` component by @panchicore in [#542](https://github.com/validmind/frontend/pull/542)--->
#### Expanded rich-text editor support
:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
- Forms in the **Model Findings** and **Validation Report** sections now support the rich-text editor interface found in the rest of our content blocks. 
- This support enables you to use the editor for your finding descriptions and remediation plans, for example. 
:::

::: {.w-30-ns .tc}
[Work with content blocks](/guide/model-documentation/work-with-content-blocks.qmd){.button}

:::

::::


## Bug fixes

<!---Invalid content blocks create errors in run documentation by @cachafla in [#326](https://github.com/validmind/developer-framework/pull/326)--->
#### Invalid content blocks for `run_documentation_tests()`

:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
- We've fixed an issue where previously using an invalid test identifier would prevent `run_documentation_tests()` from running all available tests. 
- The full test suite now runs as expected, even when an invalid test identifier causes an error for an individual test.
:::

::: {.w-30-ns .tc}
[run_documentation_tests()](/validmind/validmind.html#run_documentation_tests){.button target="_blank"}

:::

::::

<!---Ability to show condensed sections in documentation sidebar by @cachafla in [#565](https://github.com/validmind/frontend/pull/565)--->
#### Show all collapsed sections in documentation 
:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
- We've fixed an issue where previously the table of contents was not displaying every subsection that belongs to the parent section. 
- The table of contents now accurately reflects the complete structure of the documentation, including all subsections.
:::

::: {.w-40-ns}

[Working with model documentation](/guide/model-documentation/working-with-model-documentation.qmd){.button}

:::

::::


<!---Fixed an issue where the diff for validation reports was showing inco… by @even-steven in [#561](https://github.com/validmind/frontend/pull/561)--->
#### Template swap diffs

:::: {.flex .flex-wrap .justify-around}

::: {.w-60-ns}
- We've fixed an issue where previously the diff for validation reports was showing incorrectly when swapping templates. 
- The correct diff between the current and the new template is now displayed.
:::

::: {.w-40-ns}

[Swap documentation templates](/guide/model-documentation/swap-documentation-templates.qmd){.button}

:::

::::


<!---bugfix: [sc-2699] Clicking on a recent activity item should link directly to the associated content block by @panchicore in [#536](https://github.com/validmind/frontend/pull/536)--->
#### Activity item links to the corresponding content block
:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
- We've fixed an issue where previously clicking on an activity item would not redirect you to the corresponding content block. 
- Clicking on a recent item now takes you to the correct content block as expected.
:::

::: {.w-30-ns .tc}
[View model activity](/guide/model-inventory/view-model-activity.qmd){.button}

:::

::::


## Documentation updates

<!---User management docs by @nrichers in [#137](https://github.com/validmind/documentation/pull/137)--->
#### New user management documentation
:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
- Our user guide now includes end-to-end instructions for managing users on the ValidMind platform. 
- This new content covers common tasks such as inviting new users, adding them to user groups, and managing roles and permissions.
:::

::: {.w-30-ns .tc}
[Managing users](/guide/configuration/managing-users.qmd){.button}

:::

::::

<!---Add input_id usage to notebook samples by @cachafla in [#332](https://github.com/validmind/developer-framework/pull/332)--->
#### Updated sample notebooks with current `input_id` usage
:::: {.flex .flex-wrap .justify-around}

::: {.w-70-ns}
We updated our sample notebooks to show the current, recommended usage for `input_id` when calling `vm.init_dataset()` or `vm.init_model()`.
:::

::: {.w-30-ns .tc}
[Code samples](/developer/samples-jupyter-notebooks.qmd){.button}

:::

::::

{{< include /releases/_how-to-upgrade.qmd >}}