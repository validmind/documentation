---
title: "Enhancements -- August 15, 2023"
keywords: "release notes, model risk management, ValidMind"
---


<!---Update readme for open source by @sydneysugar in [#219](https://github.com/validmind/validmind-python/pull/219)--->
- **Update readme for open source**. Updates to the README file in the validmind-python repo for open source contributions.


<!---John6797/sc 1980/metric test class dx improvements by @johnwalz97 in [#220](https://github.com/validmind/validmind-python/pull/220)--->
- **John6797/sc 1980/metric test class dx improvements**. * Added a `metadata` and `tags` attribute to the `Test` base class for better categorization and filtering of tests
* Added a new `task_type` argument to the `list_tests()` function to allow simple filtering by `task_type` set in a test
* Renamed `required_context` to `required_inputs` across the whole ValidMind SDK


<!---feat: [sc-1862] User should have a way to discover required context and default config when running tests by @johnwalz97 in [#204](https://github.com/validmind/validmind-python/pull/204)--->
- **feat: [sc-1862] User should have a way to discover required context and default config when running tests**. Prep work for making test configuration a first-class citizen in the framework. This PR adds quite a few changes to how `required_context` and `default_parameters` for tests are surfaced to the user. The following enhancements have been made:

* `vm.preview_template()` now shows expandable details for each test-driven content block. The details show the test's human-readable name, the description of the test as well as the `required_context` and `default_params` set by the test class
* `vm.tests.list_tests()` shows only `ID`, `Name`, and `Description` for each test
* `vm.tests.describe_test()` shows the full test details (all of the above + `required_context` and `default_params`
* A new function `vm.get_test_suite()` is now available via the high-level Validmind API that allows users to get the test suite instance for either the 
* A new method, `get_default_config()`, has been added to both the TestPlan and TestSuite classes. This method returns a dictionary containing all configuration parameters exposed by the tests within the plans and suites
* A new method, `get_required_context()`, has also been added along with the above. This method returns a list of all required context variables that must be set for the tests to be able to run
