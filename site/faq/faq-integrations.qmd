---
title: "Integrations and support"
date: last-modified
aliases:
  - ../guide/faq-integrations.html
listing:
  - id: faq-integrations
    type: grid
    grid-columns: 3
    max-description-length: 250
    sort: false
    fields: [title, description]
    contents:
    - ../developer/model-documentation/supported-models.qmd
    - ../about/overview-llm-features.qmd
    - ../about/deployment/deployment-options.qmd
---

## What libraries does {{< var vm.product >}} support?

- {{< var vm.product >}} supports the most popular open-source model development libraries in Python and R, such as scikit-learn, XGBoost, statsmodels, PyTorch, TensorFlow, and more.[^1]
- For complex distributed training pipelines built with frameworks like TensorFlow, {{< var vm.product >}} can directly access the trained model instance to extract metadata stored in the model object, if the {{< var vm.developer >}} is imported from within the pipeline's code. 

## What test ingestion or modeling techniques are supported?

- {{< var vm.product >}} supports ingesting test results from your training and evaluation pipeline, such as using batch prediction or online prediction mechanisms.* 
- We are also offer standard documentation via the {{< var vm.developer >}} for additional modeling techniques.[^2] 

## What languages and development environments are supported?

- The {{< var validmind.developer >}}* is designed to be platform-agnostic and compatible with the most popular open-source programming languages and model development environments, such as R.
- Currently, we support **Python {{< var version.python >}}** and the most popular AI/ML and data science libraries (scikit-learn, XGBoost, statsmodels, PyTorch, TensorFlow).
- Support for commercial and closed-source programming languages such as SAS and Matlab depends on specific deployment details and commercial agreements with customers.

## Does {{< var vm.product >}} support data dictionaries?

Yes, you can pass data dictionaries to {{< var vm.product >}} via the {{< var vm.developer >}}, such as in CSV format.**

## What large language model (LLM) features are offered?

{{< var vm.product >}} offers several specialized features that use large language models (LLMs) to streamline model risk management and ensure regulatory compliance:
 
- **Test interpretation** — Interprets results from tests run within {{< var vm.product >}}.
- **Qualitative checks** — Leverages metadata from the model inventory, test outcomes, and additional data provided to create qualitative sections within model documentation.
- **Risk assessment** — Using data from test results, generates a tailored risk assessment for each section of model documentation.
- **Document checker** — Reviews model development documentation to ensure it aligns with relevant regulatory requirements.

<span id="explanability"></span>

{{< include _faq-explainability.qmd >}}

## What deployment options are supported by {{< var vm.product >}}?

{{< include /about/deployment/_deployment-available-options.qmd >}}

<!-- BELOW REMOVED ON REQUEST AS PER SC-6528 -->

<!-- ## Can you integrate with JIRA to connect with our Model Development pipeline?

{{< var vm.product >}} is planning to provide integration with JIRA tickets via the JIRA Python API. You will be able to configure {{< var vm.product >}} to update the status of a particular JIRA ticket when a specific state or approval is triggered from the workflow (roadmap item – Q3’2023). -->

<!-- ## Do you support integration with data lakes and ETL solutions?

Support for connecting to data lakes and data processing or ETL pipelines is on our roadmap (Q3’2023+).

We will be implementing connector interfaces allowing extraction of relationships between raw data sources and final post-processed datasets for preloaded session instances received from Spark and Snowflake. -->

## Learn more

:::{#faq-integrations}
:::


<!-- FOOTNOTES -->

[^1]: [Supported modeling libraries and other tools](/developer/model-documentation/supported-models.qmd#supported-modeling-libraries-and-other-tools)

[^2]: [Do you include explainability-related testing and documentation?](#explanability)
