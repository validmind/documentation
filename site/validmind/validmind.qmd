---
title: "ValidMind Library Python API"
aliases:
  - index.html
sidebar: validmind-reference
toc: false
# module.qmd.jinja2
---

<!-- docstring.jinja2 -->

The ValidMind Library is a suite of developer tools and methods designed to automate the documentation and validation of your models.

Designed to be model agnostic, the ValidMind Library provides all the standard functionality without requiring you to rewrite any functions as long as your model is built in Python.

With a rich array of documentation tools and test suites, from documenting descriptions of your datasets to testing your models for weak spots and overfit areas, the ValidMind Library helps you automate model documentation by feeding the ValidMind Platform with documentation artifacts and test results.

To install the ValidMind Library:

```bash
pip install validmind
```

To initialize the ValidMind Library, paste the code snippet with the model identifier credentials directly into your development source code, replacing this example with your own:

```python
import validmind as vm

vm.init(
  api_host = "https://app.prod.validmind.ai/api/v1/tracking/tracking",
  api_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  api_secret = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  project = "<project-identifier>"
)
```

After you have pasted the code snippet into your development source code and executed the code, the Python Library API will register with ValidMind. You can now use the ValidMind Library to document and test your models, and to upload to the ValidMind Platform.

<!-- # Python API -->

## \_\_version\_\_

<!-- signatures.jinja2 - version signature -->

::: {.signature}

<span class="name">2.10.0</span>

:::

## init<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">init</span>(<span class="params"><span class="n">project</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">api_key</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">api_secret</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">api_host</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">model</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">monitoring</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="muted">,</span></span><span class="params"><span class="n">generate_descriptions</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">bool</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>):

:::

<!-- docstring.jinja2 -->

Initializes the API client instances and calls the /ping endpoint to ensure the provided credentials are valid and we can connect to the ValidMind API.

If the API key and secret are not provided, the client will attempt to retrieve them from the environment variables `VM_API_KEY` and `VM_API_SECRET`.

**Arguments**

- `project (str, optional)`: The project CUID. Alias for model. Defaults to None. [DEPRECATED]
- `model (str, optional)`: The model CUID. Defaults to None.
- `api_key (str, optional)`: The API key. Defaults to None.
- `api_secret (str, optional)`: The API secret. Defaults to None.
- `api_host (str, optional)`: The API host. Defaults to None.
- `monitoring (bool, optional)`: The ongoing monitoring flag. Defaults to False.
- `generate_descriptions (bool, optional)`: Whether to use GenAI to generate test result descriptions. Defaults to True.

**Raises**

- `ValueError`: If the API key and secret are not provided

## init_dataset<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">init_dataset</span>(<span class="params"><span class="n">dataset</span><span class="p">:</span><span class="n">Union</span><span class="p">\[</span><span class="n">pd</span>.<span class="n">DataFrame</span><span class="p">, </span><span class="n">pl</span>.<span class="n">DataFrame</span><span class="p">, </span><span class="n">np</span>.<span class="n">ndarray</span><span class="p">, </span><span class="n">torch</span>.<span class="n">utils</span>.<span class="n">data</span>.<span class="n">tensordataset</span><span class="p">\]</span><span class="muted">,</span></span><span class="params"><span class="n">model</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><a href="/validmind/validmind/vm_models.qmd#vmmodel">validmind.vm_models.VMModel</a><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">index</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Any</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">index_name</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">date_time_index</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="muted">,</span></span><span class="params"><span class="n">columns</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">text_column</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">target_column</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">feature_columns</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">extra_columns</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">class_labels</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">type</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">input_id</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">copy_data</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span><span class="muted">,</span></span><span class="params"><span class="n">\_\_log</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.qmd#vmdataset">validmind.vm_models.VMDataset</a></span>:

:::

<!-- docstring.jinja2 -->

Initializes a VM Dataset, which can then be passed to other functions that can perform additional analysis and tests on the data. This function also ensures we are reading a valid dataset type.

The following dataset types are supported:

- Pandas DataFrame
- Polars DataFrame
- Numpy ndarray
- Torch TensorDataset

**Arguments**

- `dataset`: Dataset from various Python libraries.
- `model (VMModel)`: ValidMind model object.
- `index (Any)`: Index for the dataset.
- `index_name (str)`: Name of the index column.
- `date_time_index (bool)`: Whether the index is a datetime index.
- `columns (List[str])`: List of column names.
- `text_column (str)`: Name of the text column.
- `target_column (str)`: The name of the target column in the dataset.
- `feature_columns (List[str])`: A list of names of feature columns in the dataset.
- `extra_columns (Dict[str, Any])`: A dictionary containing the names of the prediction_column and group_by_columns in the dataset.
- `class_labels (Dict[str, Any])`: A list of class labels for classification problems.
- `type (str)`: The type of dataset (one of DATASET_TYPES) - DEPRECATED.
- `input_id (str)`: The input ID for the dataset (e.g. "my_dataset"). By default, this will be set to `dataset` but if you are passing this dataset as a test input using some other key than `dataset`, then you should set this to the same key.
- `copy_data (bool, optional)`: Whether to copy the data. Defaults to True.
- `__log (bool, optional)`: Whether to log the input. Defaults to True.

**Returns**

- A VM Dataset instance.

**Raises**

- `ValueError`: If the dataset type is not supported.

## init_model<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">init_model</span>(<span class="params"><span class="n">model</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">object</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">input_id</span><span class="p">:</span><span class="nb">str</span><span class="o">=</span><span class="s1">'model'</span><span class="muted">,</span></span><span class="params"><span class="n">attributes</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">predict_fn</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Callable</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">\_\_log</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span><span class="muted">,</span></span><span class="params"><span class="n">\*\*kwargs</span><span class="p">:</span><span class="n">Any</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.qmd#vmmodel">validmind.vm_models.VMModel</a></span>:

:::

<!-- docstring.jinja2 -->

Initializes a VM Model, which can then be passed to other functions that can perform additional analysis and tests on the data. This function also ensures we are creating a model supported libraries.

**Arguments**

- `model`: A trained model or VMModel instance.
- `input_id (str)`: The input ID for the model (e.g. "my_model"). By default, this will be set to `model` but if you are passing this model as a test input using some other key than `model`, then you should set this to the same key.
- `attributes (dict)`: A dictionary of model attributes.
- `predict_fn (callable)`: A function that takes an input and returns a prediction.
- `**kwargs`: Additional arguments to pass to the model.

**Returns**

- A VM Model instance.

**Raises**

- `ValueError`: If the model type is not supported.

## init_r_model<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">init_r_model</span>(<span class="params"><span class="n">model_path</span><span class="p">:</span><span class="nb">str</span><span class="muted">,</span></span><span class="params"><span class="n">input_id</span><span class="p">:</span><span class="nb">str</span><span class="o">=</span><span class="s1">'model'</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.qmd#vmmodel">validmind.vm_models.VMModel</a></span>:

:::

<!-- docstring.jinja2 -->

Initialize a VM Model from an R model.

LogisticRegression and LinearRegression models are converted to sklearn models by extracting the coefficients and intercept from the R model. XGB models are loaded using the xgboost since xgb models saved in .json or .bin format can be loaded directly with either Python or R.

**Arguments**

- `model_path (str)`: The path to the R model saved as an RDS or XGB file.
- `input_id (str, optional)`: The input ID for the model. Defaults to "model".

**Returns**

- A VM Model instance.

## get_test_suite<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">get_test_suite</span>(<span class="params"><span class="n">test_suite_id</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">section</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">\*args</span><span class="p">:</span><span class="n">Any</span><span class="muted">,</span></span><span class="params"><span class="n">\*\*kwargs</span><span class="p">:</span><span class="n">Any</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.qmd#testsuite">validmind.vm_models.TestSuite</a></span>:

:::

<!-- docstring.jinja2 -->

Gets a TestSuite object for the current project or a specific test suite.

This function provides an interface to retrieve the TestSuite instance for the current project or a specific TestSuite instance identified by test_suite_id. The project Test Suite will contain sections for every section in the project's documentation template and these Test Suite Sections will contain all the tests associated with that template section.

**Arguments**

- `test_suite_id (str, optional)`: The test suite name. If not passed, then the project's test suite will be returned. Defaults to None.
- `section (str, optional)`: The section of the documentation template from which to retrieve the test suite. This only applies if test_suite_id is None. Defaults to None.
- `args`: Additional arguments to pass to the TestSuite.
- `kwargs`: Additional keyword arguments to pass to the TestSuite.

**Returns**

- The TestSuite instance.

## log_metric<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">log_metric</span>(<span class="params"><span class="n">key</span><span class="p">:</span><span class="nb">str</span><span class="muted">,</span></span><span class="params"><span class="n">value</span><span class="p">:</span><span class="n">Union</span><span class="p">\[</span><span class="nb">int</span><span class="p">, </span><span class="nb">float</span><span class="p">\]</span><span class="muted">,</span></span><span class="params"><span class="n">inputs</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">params</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">recorded_at</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">thresholds</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">passed</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">bool</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>):

:::

<!-- docstring.jinja2 -->

Logs a unit metric.

Unit metrics are key-value pairs where the key is the metric name and the value is a scalar (int or float). These key-value pairs are associated with the currently selected model (inventory model in the ValidMind Platform) and keys can be logged to over time to create a history of the metric. On the ValidMind Platform, these metrics will be used to create plots/visualizations for documentation and dashboards etc.

**Arguments**

- `key (str)`: The metric key
- `value (Union[int, float])`: The metric value (scalar)
- `inputs (List[str])`: List of input IDs
- `params (Dict[str, Any])`: Parameters used to generate the metric
- `recorded_at (str)`: Timestamp when the metric was recorded
- `thresholds (Dict[str, Any])`: Thresholds for the metric
- `passed (bool)`: Whether the metric passed validation thresholds

## preview_template<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">preview_template</span>():

:::

<!-- docstring.jinja2 -->

Preview the documentation template for the current project.

This function will display the documentation template for the current project. If the project has not been initialized, then an error will be raised.

**Raises**

- `ValueError`: If the project has not been initialized.

## print_env<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">print_env</span>():

:::

<!-- docstring.jinja2 -->

Prints a log of the running environment for debugging.

Output includes: ValidMind Library version, operating system details, installed dependencies, and the ISO 8601 timestamp at log creation.

## reload<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">reload</span>():

:::

<!-- docstring.jinja2 -->

Reconnect to the ValidMind API and reload the project configuration.

## run_documentation_tests<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">run_documentation_tests</span>(<span class="params"><span class="n">section</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">send</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span><span class="muted">,</span></span><span class="params"><span class="n">fail_fast</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="muted">,</span></span><span class="params"><span class="n">inputs</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">config</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">\*\*kwargs</span><span class="p">:</span><span class="n">Any</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><span class="n">Union</span><span class="p">\[</span><a href="/validmind/validmind/vm_models.qmd#testsuite">validmind.vm_models.TestSuite</a><span class="p">, </span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><a href="/validmind/validmind/vm_models.qmd#testsuite">validmind.vm_models.TestSuite</a><span class="p">\]</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Collect and run all the tests associated with a template.

This function will analyze the current project's documentation template and collect all the tests associated with it into a test suite. It will then run the test suite, log the results to the ValidMind API, and display them to the user.

**Arguments**

- `section (str or list, optional)`: The section(s) to preview. Defaults to None.
- `send (bool, optional)`: Whether to send the results to the ValidMind API. Defaults to True.
- `fail_fast (bool, optional)`: Whether to stop running tests after the first failure. Defaults to False.
- `inputs (dict)`: A dictionary of test inputs to pass to the TestSuite.
- `config`: A dictionary of test parameters to override the defaults.
- `**kwargs`: backwards compatibility for passing in test inputs using keyword arguments.

**Returns**

- TestSuite or dict: The completed TestSuite instance or a dictionary of TestSuites if section is a list.

**Raises**

- `ValueError`: If the project has not been initialized.

## run_test_suite<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">run_test_suite</span>(<span class="params"><span class="n">test_suite_id</span><span class="p">:</span><span class="nb">str</span><span class="muted">,</span></span><span class="params"><span class="n">send</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span><span class="muted">,</span></span><span class="params"><span class="n">fail_fast</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="muted">,</span></span><span class="params"><span class="n">config</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">inputs</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">\*\*kwargs</span><span class="p">:</span><span class="n">Any</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.qmd#testsuite">validmind.vm_models.TestSuite</a></span>:

:::

<!-- docstring.jinja2 -->

High Level function for running a test suite.

This function provides a high level interface for running a test suite. A test suite is a collection of tests. This function will automatically find the correct test suite class based on the test_suite_id, initialize each of the tests, and run them.

**Arguments**

- `test_suite_id (str)`: The test suite name. For example, 'classifier_full_suite'.
- `config (dict, optional)`: A dictionary of parameters to pass to the tests in the test suite. Defaults to None.
- `send (bool, optional)`: Whether to post the test results to the API. send=False is useful for testing. Defaults to True.
- `fail_fast (bool, optional)`: Whether to stop running tests after the first failure. Defaults to False.
- `inputs (dict, optional)`: A dictionary of test inputs to pass to the TestSuite, such as `model`, `dataset` `models`, etc. These inputs will be accessible by any test in the test suite. See the test documentation or `vm.describe_test()` for more details on the inputs required for each. Defaults to None.
- `**kwargs`: backwards compatibility for passing in test inputs using keyword arguments.

**Returns**

- The TestSuite instance.

**Raises**

- `ValueError`: If the test suite name is not found or if there is an error initializing the test suite.

## tags<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">tags</span>(<span class="param"><span class="n">\*tags</span><span class="p">:</span><span class="nb">str</span></span>):

:::

<!-- docstring.jinja2 -->

Decorator for specifying tags for a test.

**Arguments**

- `*tags`: The tags to apply to the test.

## tasks<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">tasks</span>(<span class="param"><span class="n">\*tasks</span><span class="p">:</span><span class="nb">str</span></span>):

:::

<!-- docstring.jinja2 -->

Decorator for specifying the task types that a test is designed for.

**Arguments**

- `*tasks`: The task types that the test is designed for.

## test<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">test</span>(<span class="param"><span class="n">func_or_id</span><span class="p">:</span><span class="n">Union</span><span class="p">\[</span><span class="n">Callable</span><span class="p">\[</span><span class="n">...</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">, </span><span class="nb">str</span><span class="p">, </span><span class="n">None</span><span class="p">\]</span></span>):

:::

<!-- docstring.jinja2 -->

Decorator for creating and registering custom tests

This decorator registers the function it wraps as a test function within ValidMind under the provided ID. Once decorated, the function can be run using the `validmind.tests.run_test` function.

The function can take two different types of arguments:

- Inputs: ValidMind model or dataset (or list of models/datasets). These arguments must use the following names: `model`, `models`, `dataset`, `datasets`.
- Parameters: Any additional keyword arguments of any type (must have a default value) that can have any name.

The function should return one of the following types:

- Table: Either a list of dictionaries or a pandas DataFrame
- Plot: Either a matplotlib figure or a plotly figure
- Scalar: A single number (int or float)
- Boolean: A single boolean value indicating whether the test passed or failed

The function may also include a docstring. This docstring will be used and logged as the metric's description.

**Arguments**

- `func_or_id (Union[Callable[..., Any], str, None])`: Either the function to decorate or the test ID. If None, the function name is used.

**Returns**

- The decorated function.

## scorer_decorator<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">scorer</span>(<span class="param"><span class="n">func_or_id</span><span class="p">:</span><span class="n">Union</span><span class="p">\[</span><span class="n">Callable</span><span class="p">\[</span><span class="n">...</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">, </span><span class="nb">str</span><span class="p">, </span><span class="n">None</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><span class="n">Callable</span><span class="p">\[</span><span class="p">\[</span><a href="/validmind/validmind/vm_models.qmd#f">validmind.vm_models.F</a><span class="p">\]</span><span class="p">, </span><a href="/validmind/validmind/vm_models.qmd#f">validmind.vm_models.F</a><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Decorator for creating and registering custom scorers

This decorator registers the function it wraps as a scorer function within ValidMind under the provided ID. Once decorated, the function can be run using the `validmind.scorer.run_scorer` function.

The scorer ID can be provided in three ways:

1. Explicit ID: `@scorer("validmind.scorer.classification.BrierScore")`
1. Auto-generated from path: `@scorer()` - automatically generates ID from file path
1. Function name only: `@scorer` - uses function name with validmind.scorer prefix

The function can take two different types of arguments:

- Inputs: ValidMind model or dataset (or list of models/datasets). These arguments must use the following names: `model`, `models`, `dataset`, `datasets`.
- Parameters: Any additional keyword arguments of any type (must have a default value) that can have any name.

The function should return one of the following types:

- Table: Either a list of dictionaries or a pandas DataFrame
- Plot: Either a matplotlib figure or a plotly figure
- Scalar: A single number (int or float)
- Boolean: A single boolean value indicating whether the test passed or failed
- List: A list of values (for row-level metrics) or a list of dictionaries with consistent keys
- Any other type: The output will be stored as raw data for use by calling code

When returning a list of dictionaries:

- All dictionaries must have the same keys
- The list length must match the number of rows in the dataset
- Each dictionary key will become a separate column when using assign_scores
- Column naming follows the pattern: {model_id}_{metric_name}_{dict_key}

Note: Scorer outputs are not logged to the backend and are intended for use by other parts of the system (e.g., assign_scores method).

The function may also include a docstring. This docstring will be used and logged as the scorer's description.

**Arguments**

- `func_or_id (Union[Callable[..., Any], str, None], optional)`: Either the function to decorate or the scorer ID. If None or empty string, the ID is auto-generated from the file path. Defaults to None.

**Returns**

- The decorated function.

## log_text<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">log_text</span>(<span class="params"><span class="n">content_id</span><span class="p">:</span><span class="nb">str</span><span class="muted">,</span></span><span class="params"><span class="n">text</span><span class="p">:</span><span class="nb">str</span><span class="muted">,</span></span><span class="params"><span class="n">\_json</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Logs free-form text to ValidMind API.

**Arguments**

- `content_id (str)`: Unique content identifier for the text.
- `text (str)`: The text to log. Will be converted to HTML with MathML support.
- `_json (dict, optional)`: Additional metadata to associate with the text. Defaults to None.

**Returns**

- An accordion widget containing the logged text as HTML.

**Raises**

- `ValueError`: If content_id or text are empty or not strings.
- `Exception`: If the API call fails.

## experimental_agent<span class="suffix"></span>

<!-- docstring.jinja2 -->

Agent interface for all text generation tasks

<!-- module.qmd.jinja2 -->

## <span class="prefix"></span> RawData

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">RawData</span>:

:::

<!-- docstring.jinja2 -->

Holds raw data for a test result.

<!-- module.qmd.jinja2 -->

### RawData<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="name">RawData</span>(<span class="params"><span class="n">log</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="muted">,</span></span><span class="params"><span class="n">\*\*kwargs</span><span class="p">:</span><span class="n">Any</span></span>)

:::

<!-- docstring.jinja2 -->

Create a new RawData object.

**Arguments**

- `log (bool)`: If True, log the raw data to ValidMind.
- `**kwargs`: Keyword arguments to set as attributes, such as `RawData(log=True, dataset_duplicates=df_duplicates)`.

<!-- module.qmd.jinja2 -->

### inspect<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">inspect</span>(<span class="param"><span class="bp">self</span><span class="muted">,</span></span><span class="param"><span class="n">show</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><span class="n">Optional</span><span class="p">\[</span><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Inspect the raw data.

**Arguments**

- `show (bool)`: If True, print the raw data. If False, return it.

**Returns**

- If True, print the raw data and return None. If False, return the raw data dictionary.

<!-- module.qmd.jinja2 -->

### serialize<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">serialize</span>(<span class="param"><span class="bp">self</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Serialize the raw data to a dictionary

**Returns**

- The serialized raw data
