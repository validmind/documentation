---
title: "[validmind](/validmind/validmind.qmd).errors"
sidebar: validmind-reference
# errors.qmd.jinja2
---

<!-- docstring.jinja2 -->

This module contains all the custom errors that are used in the ValidMind Library.

The following base errors are defined for others:

- BaseError
- APIRequestError

## Base errors

### [class]{.muted} BaseError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">BaseError</span>(<span class="base">Exception</span>):

:::

<!-- docstring.jinja2 -->

Common base class for all non-exit exceptions.

#### [BaseError[()]{.muted}](#__init__)

<!-- signatures.jinja2 -->

::: {.signature}

<span class="name">BaseError</span>(<span class="param"><span class="n">message</span><span class="o">=</span><span class="s1">''</span></span>)

:::

#### [description[()]{.muted}](#description)

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">description</span>(<span class="params"><span class="bp">self</span><span class="muted">,</span></span><span class="params"><span class="n">\*args</span><span class="muted">,</span></span><span class="params"><span class="n">\*\*kwargs</span></span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- builtins.BaseException with_traceback, add_note

### [class]{.muted} APIRequestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">APIRequestError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

Generic error for API request errors that are not known.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

## API errors

### [class]{.muted} InvalidAPICredentialsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidAPICredentialsError</span>(<span class="base">APIRequestError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingAPICredentialsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingAPICredentialsError</span>(<span class="base">BaseError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

## Model errors

### [class]{.muted} InvalidXGBoostTrainedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidXGBoostTrainedModelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid XGBoost trained model is used when calling init_r_model.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingModelIdError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingModelIdError</span>(<span class="base">BaseError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingOrInvalidModelPredictFnError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingOrInvalidModelPredictFnError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the PyTorch model is missing a predict function or its predict method does not have the expected arguments.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported model is used.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedModelForSHAPError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelForSHAPError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported model is used for SHAP importance.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedRModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedRModelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported R model is used.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

## Test errors

### [class]{.muted} GetTestSuiteError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">GetTestSuiteError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the test suite could not be found.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InitializeTestSuiteError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InitializeTestSuiteError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the test suite was found but could not be initialized.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidTestParametersError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestParametersError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When invalid parameters are provided for the test.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidTestResultsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestResultsError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid test results object is sent to the API.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} LoadTestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">LoadTestError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

Exception raised when an error occurs while loading a test.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingRequiredTestInputError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingRequiredTestInputError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When a required test context variable is missing.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} SkipTestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">SkipTestError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

Useful error to throw when a test cannot be executed.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} TestInputInvalidDatasetError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">TestInputInvalidDatasetError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid dataset is used in a test context.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

## Input validation errors

### [class]{.muted} InvalidXGBoostTrainedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidXGBoostTrainedModelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid XGBoost trained model is used when calling init_r_model.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingModelIdError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingModelIdError</span>(<span class="base">BaseError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingOrInvalidModelPredictFnError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingOrInvalidModelPredictFnError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the PyTorch model is missing a predict function or its predict method does not have the expected arguments.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidTestParametersError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestParametersError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When invalid parameters are provided for the test.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidTestResultsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestResultsError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid test results object is sent to the API.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingRequiredTestInputError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingRequiredTestInputError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When a required test context variable is missing.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidAPICredentialsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidAPICredentialsError</span>(<span class="base">APIRequestError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidContentIdPrefixError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidContentIdPrefixError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid text content_id is sent to the API.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidInputError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidInputError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid input object is provided.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidMetricResultsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidMetricResultsError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid metric results object is sent to the API.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidProjectError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidProjectError</span>(<span class="base">APIRequestError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidRequestBodyError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidRequestBodyError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When a POST/PUT request is made with an invalid request body.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidTextObjectError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTextObjectError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid Metadata (Text) object is sent to the API.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} InvalidValueFormatterError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidValueFormatterError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an invalid value formatter is provided when serializing results.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingAPICredentialsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingAPICredentialsError</span>(<span class="base">BaseError</span>):

:::

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingCacheResultsArgumentsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingCacheResultsArgumentsError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the cache_results function is missing arguments.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingClassLabelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingClassLabelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the one or more class labels are missing from provided dataset targets.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingDependencyError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingDependencyError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When a required dependency is missing.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingDocumentationTemplate

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingDocumentationTemplate</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the client config is missing the documentation template.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingRExtrasError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingRExtrasError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When the R extras have not been installed.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingTextContentIdError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingTextContentIdError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When a Text object is sent to the API without a content_id.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} MissingTextContentsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingTextContentsError</span>(<span class="base">APIRequestError</span>):

:::

<!-- docstring.jinja2 -->

When a Text object is sent to the API without a "text" attribute.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [APIRequestError[()]{.muted}](#class-apirequesterror)
- builtins.BaseException with_traceback, add_note

## Unsupported feature errors

### [class]{.muted} UnsupportedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported model is used.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedModelForSHAPError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelForSHAPError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported model is used for SHAP importance.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedRModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedRModelError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported R model is used.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedColumnTypeError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedColumnTypeError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported column type is found on a dataset.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedDatasetError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedDatasetError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported dataset is used.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note

### [class]{.muted} UnsupportedFigureError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedFigureError</span>(<span class="base">BaseError</span>):

:::

<!-- docstring.jinja2 -->

When an unsupported figure object is constructed.

<!-- errors.qmd.jinja2 - inherited members -->

**Inherited members**

- [BaseError[()]{.muted}](#class-baseerror), [description[()]{.muted}](#description)
- builtins.BaseException with_traceback, add_note
