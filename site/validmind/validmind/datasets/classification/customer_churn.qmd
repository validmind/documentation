---
title: "[validmind](/validmind/validmind.html).customer_churn"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
# module.qmd.jinja2
---

## simple_preprocess_booleans<span class='muted'>()</span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">simple_preprocess_booleans</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">columns</span><span class="p">:</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::

<!-- docstring.jinja2 -->

Preprocess boolean columns.

**Arguments**

- `df` (pandas.DataFrame): Dataframe to preprocess.
- `columns` (list): List of columns to preprocess.

**Returns**

- Preprocessed dataframe.

## simple_preprocess_categoricals<span class='muted'>()</span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">simple_preprocess_categoricals</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">columns</span><span class="p">:</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::

<!-- docstring.jinja2 -->

Preprocess categorical columns.

**Arguments**

- `df` (pandas.DataFrame): Dataframe to preprocess.
- `columns` (list): List of columns to preprocess.

**Returns**

- Preprocessed dataframe.

## simple_preprocess_numericals<span class='muted'>()</span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">simple_preprocess_numericals</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">columns</span><span class="p">:</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::

<!-- docstring.jinja2 -->

Preprocess numerical columns.

**Arguments**

- `df` (pandas.DataFrame): Dataframe to preprocess.
- `columns` (list): List of columns to preprocess.

**Returns**

- Preprocessed dataframe.

<!-- function.qmd.jinja2 -->

## get_demo_test_config[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">get_demo_test_config</span>(<span class="param"><span class="n">test_suite</span><span class="o">=</span><span class="kc">None</span></span>):

:::

<!-- docstring.jinja2 -->

Returns input configuration for the default documentation

template assigned to this demo model

The default documentation template uses the following inputs:

- raw_dataset
- train_dataset
- test_dataset
- model

We assign the following inputs depending on the input config expected by each test:

- When a test expects a "dataset" we use the raw_dataset
- When a tets expects "datasets" we use the train_dataset and test_dataset
- When a test expects a "model" we use the model
- When a test expects "model" and "dataset" we use the model and test_dataset
- The only exception is ClassifierPerformance since that runs twice: once with the train_dataset (in sample) and once with the test_dataset (out of sample)

<!-- function.qmd.jinja2 -->

## load_data[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">load_data</span>(<span class="param"><span class="n">full_dataset</span><span class="o">=</span><span class="kc">False</span></span>):

:::

<!-- function.qmd.jinja2 -->

## preprocess[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">preprocess</span>(<span class="param"><span class="n">df</span></span>):

:::
