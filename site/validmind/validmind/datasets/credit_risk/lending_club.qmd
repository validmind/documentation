---
title: "[validmind](/validmind/validmind.html).lending_club"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
# module.qmd.jinja2
---

<!-- function.qmd.jinja2 -->

## compute_scores[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">compute_scores</span>(<span class="param"><span class="n">probabilities</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-np">validmind.vm_models.np</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-ndarray">validmind.vm_models.ndarray</a></span>:

:::

<!-- function.qmd.jinja2 -->

## feature_engineering[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">feature_engineering</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">verbose</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::

<!-- function.qmd.jinja2 -->

## get_demo_test_config[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">get_demo_test_config</span>(<span class="params"><span class="n">x_test</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">y_test</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>)<span class="p"> → </span><span class="return-annotation"><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Any</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Get demo test configuration.

**Arguments**

- `x_test`: Test features DataFrame
- `y_test`: Test target Series

**Returns**

- Test configuration dictionary

<!-- function.qmd.jinja2 -->

## init_vm_objects[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">init_vm_objects</span>(<span class="param"><span class="n">scorecard</span></span>):

:::

<!-- function.qmd.jinja2 -->

## load_data[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">load_data</span>(<span class="params"><span class="n">source</span><span class="p">:</span><span class="nb">str</span><span class="o">=</span><span class="s1">'online'</span><span class="muted">,</span></span><span class="params"><span class="n">verbose</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::

<!-- docstring.jinja2 -->

Load data from either an online source or offline files, automatically dropping specified columns for offline data.

**Arguments**

- `source`: 'online' for online data, 'offline' for offline files. Defaults to 'online'.

**Returns**

- DataFrame containing the loaded data.

<!-- function.qmd.jinja2 -->

## load_scorecard[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">load_scorecard</span>():

:::

<!-- function.qmd.jinja2 -->

## load_test_config[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">load_test_config</span>(<span class="param"><span class="n">scorecard</span></span>):

:::

<!-- function.qmd.jinja2 -->

## preprocess[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">preprocess</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">verbose</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::

<!-- function.qmd.jinja2 -->

## split[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">split</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">validation_split</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">float</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">test_size</span><span class="p">:</span><span class="nb">float</span><span class="o">=</span><span class="kc">0.2</span><span class="muted">,</span></span><span class="params"><span class="n">add_constant</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">False</span><span class="muted">,</span></span><span class="params"><span class="n">verbose</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> → </span><span class="return-annotation"><span class="n">Tuple</span><span class="p">\[</span><a href="/validmind/validmind/vm_models.html#class-np">validmind.vm_models.np</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-ndarray">validmind.vm_models.ndarray</a><span class="p">, </span><a href="/validmind/validmind/vm_models.html#class-np">validmind.vm_models.np</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-ndarray">validmind.vm_models.ndarray</a><span class="p">, </span><a href="/validmind/validmind/vm_models.html#class-np">validmind.vm_models.np</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-ndarray">validmind.vm_models.ndarray</a><span class="p">, </span><a href="/validmind/validmind/vm_models.html#class-np">validmind.vm_models.np</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-ndarray">validmind.vm_models.ndarray</a><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Split dataset into train, validation (optional), and test sets.

**Arguments**

- `df`: Input DataFrame
- `validation_split`: If None, returns train/test split. If float, returns train/val/test split
- `test_size`: Proportion of data for test set (default: 0.2)
- `add_constant`: Whether to add constant column for statsmodels (default: False)

**Returns**

- If validation_size is None: train_df, test_df If validation_size is float: train_df, validation_df, test_df

<!-- function.qmd.jinja2 -->

## woe_encoding[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">woe_encoding</span>(<span class="params"><span class="n">df</span><span class="p">:</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="muted">,</span></span><span class="params"><span class="n">verbose</span><span class="p">:</span><span class="nb">bool</span><span class="o">=</span><span class="kc">True</span></span>)<span class="p"> → </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-pd">validmind.vm_models.pd</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-dataframe">validmind.vm_models.DataFrame</a></span>:

:::
