---
title: "[validmind](/validmind/validmind.qmd).ClassifierThresholdOptimization"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
# module.qmd.jinja2
---

<!-- function.qmd.jinja2 -->

## ClassifierThresholdOptimization<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="decorators"><span class="decorator">@<span class="n">tags(<span class="s">'model_validation'</span>, <span class="s">'threshold_optimization'</span>, <span class="s">'classification_metrics'</span>)</span></span><span class="decorator">@<span class="n">tasks(<span class="s">'classification'</span>)</span></span></span>

<span class="kw">def</span><span class="name">ClassifierThresholdOptimization</span>(<span class="params"><span class="n">dataset</span><span class="p">:</span><a href="/validmind/validmind/vm_models.qmd#vmdataset">validmind.vm_models.VMDataset</a><span class="muted">,</span></span><span class="params"><span class="n">model</span><span class="p">:</span><a href="/validmind/validmind/vm_models.qmd#vmmodel">validmind.vm_models.VMModel</a><span class="muted">,</span></span><span class="params"><span class="n">methods</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="n">List</span><span class="p">\[</span><span class="nb">str</span><span class="p">\]</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span><span class="muted">,</span></span><span class="params"><span class="n">target_recall</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">float</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>)<span class="p"> → </span><span class="return-annotation"><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Union</span><span class="p">\[</span><span class="n">pd</span>.<span class="n">DataFrame</span><span class="p">, </span><span class="n">go</span>.<span class="n">Figure</span><span class="p">\]</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Analyzes and visualizes different threshold optimization methods for binary classification models.

### Purpose

The Classifier Threshold Optimization test identifies optimal decision thresholds using various methods to balance different performance metrics. This helps adapt the model's decision boundary to specific business requirements, such as minimizing false positives in fraud detection or achieving target recall in medical diagnosis.

### Test Mechanism

The test implements multiple threshold optimization methods:

1. Youden's J statistic (maximizing sensitivity + specificity - 1)
1. F1-score optimization (balancing precision and recall)
1. Precision-Recall equality point
1. Target recall achievement
1. Naive (0.5) threshold For each method, it computes ROC and PR curves, identifies optimal points, and provides comprehensive performance metrics at each threshold.

### Signs of High Risk

- Large discrepancies between different optimization methods
- Optimal thresholds far from the default 0.5
- Poor performance metrics across all thresholds
- Significant gap between achieved and target recall
- Unstable thresholds across different methods
- Extreme trade-offs between precision and recall
- Threshold optimization showing minimal impact
- Business metrics not improving with optimization

### Strengths

- Multiple optimization strategies for different needs
- Visual and numerical results for comparison
- Support for business-driven optimization (target recall)
- Comprehensive performance metrics at each threshold
- Integration with ROC and PR curves
- Handles class imbalance through various metrics
- Enables informed threshold selection
- Supports cost-sensitive decision making

### Limitations

- Assumes cost of false positives/negatives are known
- May need adjustment for highly imbalanced datasets
- Threshold might not be stable across different samples
- Cannot handle multi-class problems directly
- Optimization methods may conflict with business needs
- Requires sufficient validation data
- May not capture temporal changes in optimal threshold
- Single threshold may not be optimal for all subgroups

**Arguments**

- `dataset`: VMDataset containing features and target
- `model`: VMModel containing predictions
- `methods`: List of methods to compare (default: ['youden', 'f1', 'precision_recall'])
- `target_recall`: Target recall value if using 'target_recall' method

**Returns**

- Dictionary containing:
- table: DataFrame comparing different threshold optimization methods (using weighted averages for precision, recall, and f1)
- figure: Plotly figure showing ROC and PR curves with optimal thresholds

<!-- function.qmd.jinja2 -->

## find_optimal_threshold<span class="suffix"></span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">find_optimal_threshold</span>(<span class="params"><span class="n">y_true</span><span class="p">:</span><span class="n">np</span>.<span class="n">ndarray</span><span class="muted">,</span></span><span class="params"><span class="n">y_prob</span><span class="p">:</span><span class="n">np</span>.<span class="n">ndarray</span><span class="muted">,</span></span><span class="params"><span class="n">method</span><span class="p">:</span><span class="nb">str</span><span class="o">=</span><span class="s1">'youden'</span><span class="muted">,</span></span><span class="params"><span class="n">target_recall</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">float</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>)<span class="p"> → </span><span class="return-annotation"><span class="n">Dict</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="n">Union</span><span class="p">\[</span><span class="nb">str</span><span class="p">, </span><span class="nb">float</span><span class="p">\]</span><span class="p">\]</span></span>:

:::

<!-- docstring.jinja2 -->

Find the optimal classification threshold using various methods.

**Arguments**

- `y_true`: True binary labels
- `y_prob`: Predicted probabilities
- `method`: Method to use for finding optimal threshold
- `target_recall`: Required if method='target_recall'

**Returns**

- Dictionary containing threshold and metrics
