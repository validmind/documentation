---
title: "[validmind](/validmind/validmind.html).DickeyFullerGLS"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
# module.qmd.jinja2
---

## get_logger<span class='muted'>()</span>

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">def</span><span class="name">get_logger</span>(<span class="params"><span class="n">name</span><span class="p">:</span><span class="nb">str</span><span class="o">=</span><span class="s1">'validmind'</span><span class="muted">,</span></span><span class="params"><span class="n">log_level</span><span class="p">:</span><span class="n">Optional</span><span class="p">\[</span><span class="nb">int</span><span class="p">\]</span><span class="o">=</span><span class="kc">None</span></span>)<span class="p"> â†’ </span><span class="return-annotation"><a href="/validmind/validmind/vm_models.html#class-logging">validmind.vm_models.logging</a><span class="o">.</span><a href="/validmind/validmind/vm_models.html#class-logger">validmind.vm_models.Logger</a></span>:

:::

<!-- docstring.jinja2 -->

Get a logger for the given module name

<!-- function.qmd.jinja2 -->

## DickeyFullerGLS[()]{.muted}

<!-- signatures.jinja2 -->

::: {.signature}

<span class="decorators"><span class="decorator">@<span class="n">tags(<span class="s">'time_series_data'</span>, <span class="s">'forecasting'</span>, <span class="s">'unit_root_test'</span>)</span></span><span class="decorator">@<span class="n">tasks(<span class="s">'regression'</span>)</span></span></span>

<span class="kw">def</span><span class="name">DickeyFullerGLS</span>(<span class="param"><span class="n">dataset</span><span class="p">:</span><span class="n">VMDataset</span></span>):

:::

<!-- docstring.jinja2 -->

Assesses stationarity in time series data using the Dickey-Fuller GLS test to determine the order of integration.

### Purpose

The Dickey-Fuller GLS (DFGLS) test is utilized to determine the order of integration in time series data. For machine learning models dealing with time series and forecasting, this metric evaluates the existence of a unit root, thereby checking whether a time series is non-stationary. This analysis is a crucial initial step when dealing with time series data.

### Test Mechanism

This code implements the Dickey-Fuller GLS unit root test on each attribute of the dataset. This process involves iterating through every column of the dataset and applying the DFGLS test to assess the presence of a unit root. The resulting information, including the test statistic ('stat'), the p-value ('pvalue'), the quantity of lagged differences utilized in the regression ('usedlag'), and the number of observations ('nobs'), is subsequently stored.

### Signs of High Risk

- A high p-value for the DFGLS test represents a high risk. Specifically, a p-value above a typical threshold of 0.05 suggests that the time series data is quite likely to be non-stationary, thus presenting a high risk for generating unreliable forecasts.

### Strengths

- The Dickey-Fuller GLS test is a potent tool for checking the stationarity of time series data.
- It helps to verify the assumptions of the models before the actual construction of the machine learning models proceeds.
- The results produced by this metric offer a clear insight into whether the data is appropriate for specific machine learning models, especially those demanding the stationarity of time series data.

### Limitations

- Despite its benefits, the DFGLS test does present some drawbacks. It can potentially lead to inaccurate conclusions if the time series data incorporates a structural break.
- If the time series tends to follow a trend while still being stationary, the test might misinterpret it, necessitating further detrending.
- The test also presents challenges when dealing with shorter time series data or volatile data, not producing reliable results in these cases.

<!-- class.qmd.jinja2 -->

## [class]{.muted} SkipTestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">SkipTestError</span>:

:::

<!-- docstring.jinja2 -->

Useful error to throw when a test cannot be executed.

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)
- **From builtins.BaseException**: with_traceback, add_note
